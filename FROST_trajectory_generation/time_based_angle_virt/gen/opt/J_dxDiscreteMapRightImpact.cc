/*
 * Automatically Generated from Mathematica.
 * Thu 4 Feb 2021 10:20:41 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t3844;
  double t749;
  double t3863;
  double t3868;
  double t3945;
  double t3950;
  double t3969;
  double t3972;
  double t3973;
  double t4025;
  double t4027;
  double t4048;
  double t4058;
  double t4078;
  double t4079;
  double t4083;
  double t3927;
  double t3929;
  double t3930;
  double t3865;
  double t3917;
  double t3918;
  double t3948;
  double t3953;
  double t3961;
  double t3962;
  double t3975;
  double t3976;
  double t3988;
  double t3991;
  double t4002;
  double t4003;
  double t4006;
  double t4014;
  double t4034;
  double t4035;
  double t4036;
  double t4026;
  double t4028;
  double t4029;
  double t4052;
  double t4059;
  double t4068;
  double t4072;
  double t4084;
  double t4085;
  double t4092;
  double t4097;
  double t4098;
  double t4099;
  double t4100;
  double t4101;
  double t4173;
  double t4174;
  double t4177;
  double t4178;
  double t4179;
  double t4180;
  double t4181;
  double t4182;
  double t4184;
  double t4185;
  double t4186;
  double t4200;
  double t4201;
  double t4202;
  double t4203;
  double t4204;
  double t4205;
  double t4206;
  double t4207;
  double t4211;
  double t4212;
  double t4213;
  double t4110;
  double t4111;
  double t4112;
  double t4105;
  double t4106;
  double t4107;
  double t4240;
  double t4241;
  double t4242;
  double t4122;
  double t4126;
  double t4235;
  double t4236;
  double t4237;
  double t4238;
  double t4158;
  double t4159;
  double t4160;
  double t4137;
  double t4144;
  double t4149;
  double t4228;
  double t4229;
  double t4230;
  double t4162;
  double t4163;
  double t4223;
  double t4224;
  double t4225;
  double t4226;
  double t3934;
  double t4037;
  double t4167;
  double t4168;
  double t4169;
  double t4170;
  double t4171;
  double t4183;
  double t4187;
  double t4188;
  double t4190;
  double t4191;
  double t4192;
  double t4194;
  double t4195;
  double t4196;
  double t4197;
  double t4198;
  double t4210;
  double t4214;
  double t4215;
  double t4217;
  double t4218;
  double t4219;
  double t4246;
  double t4247;
  double t4249;
  double t4250;
  double t4251;
  double t4332;
  double t4333;
  double t4334;
  double t4335;
  double t4336;
  double t4266;
  double t4267;
  double t4268;
  double t4269;
  double t4278;
  double t4279;
  double t4280;
  double t4281;
  double t4282;
  double t4283;
  double t4284;
  double t4285;
  double t4286;
  double t4287;
  double t4288;
  double t4320;
  double t4321;
  double t4323;
  double t4355;
  double t4356;
  double t4357;
  double t4337;
  double t4338;
  double t4339;
  double t4342;
  double t4343;
  double t4346;
  double t4347;
  double t4348;
  double t4349;
  double t4350;
  double t4351;
  double t4354;
  double t4359;
  double t4360;
  double t4364;
  double t4388;
  double t4389;
  double t4366;
  double t4391;
  double t4392;
  double t4368;
  double t4256;
  double t4257;
  double t4259;
  double t4260;
  double t4261;
  double t4403;
  double t4404;
  double t4405;
  double t4406;
  double t4407;
  double t4272;
  double t4273;
  double t4299;
  double t4300;
  double t4301;
  double t4302;
  double t4303;
  double t4304;
  double t4305;
  double t4306;
  double t4307;
  double t4326;
  double t4426;
  double t4427;
  double t4428;
  double t4408;
  double t4409;
  double t4410;
  double t4413;
  double t4414;
  double t4417;
  double t4418;
  double t4419;
  double t4420;
  double t4421;
  double t4422;
  double t4425;
  double t4430;
  double t4431;
  double t4435;
  double t4459;
  double t4460;
  double t4437;
  double t4462;
  double t4463;
  double t4439;
  double t1568;
  double t3858;
  double t3923;
  double t3980;
  double t4021;
  double t4030;
  double t4086;
  double t4102;
  double t4108;
  double t4109;
  double t4121;
  double t4133;
  double t4152;
  double t4157;
  double t4161;
  double t4164;
  double t4165;
  double t2697;
  double t3860;
  double t3944;
  double t4292;
  double t4294;
  double t4038;
  double t4311;
  double t4313;
  double t4289;
  double t4290;
  double t4296;
  double t4297;
  double t4308;
  double t4309;
  double t4315;
  double t4316;
  double t4291;
  double t4293;
  double t4295;
  double t4298;
  double t4310;
  double t4312;
  double t4314;
  double t4317;
  double t4318;
  double t4166;
  double t4536;
  double t4547;
  double t4352;
  double t4556;
  double t4358;
  double t4361;
  double t4362;
  double t4365;
  double t4367;
  double t4369;
  double t4565;
  double t4378;
  double t4379;
  double t4380;
  double t4566;
  double t4374;
  double t4375;
  double t4376;
  double t4567;
  double t4570;
  double t4571;
  double t4386;
  double t4575;
  double t4390;
  double t4393;
  double t4394;
  double t4577;
  double t4396;
  double t4397;
  double t4398;
  double t4542;
  double t4550;
  double t4423;
  double t4559;
  double t4429;
  double t4432;
  double t4433;
  double t4436;
  double t4438;
  double t4440;
  double t4594;
  double t4449;
  double t4450;
  double t4451;
  double t4595;
  double t4445;
  double t4446;
  double t4447;
  double t4596;
  double t4599;
  double t4600;
  double t4457;
  double t4604;
  double t4461;
  double t4464;
  double t4465;
  double t4606;
  double t4467;
  double t4468;
  double t4469;
  double t4483;
  double t4484;
  double t4485;
  double t4486;
  double t4487;
  double t4488;
  double t4489;
  double t4490;
  double t4491;
  double t4474;
  double t4475;
  double t4322;
  double t4324;
  double t4325;
  double t4327;
  double t4328;
  double t4329;
  double t4252;
  double t4253;
  double t4254;
  double t4262;
  double t4263;
  double t4264;
  double t4172;
  double t4189;
  double t4193;
  double t4199;
  double t4216;
  double t4220;
  double t4221;
  double t4517;
  double t4518;
  double t4519;
  double t4520;
  double t4521;
  double t4522;
  double t4523;
  double t4524;
  double t4557;
  double t4558;
  double t4560;
  double t4561;
  double t4562;
  double t4651;
  double t4652;
  double t4653;
  double t4654;
  double t4655;
  double t4656;
  double t4657;
  double t4658;
  double t4659;
  double t4660;
  double t4661;
  double t4662;
  double t4663;
  double t4664;
  double t4665;
  double t4666;
  double t4576;
  double t4578;
  double t4579;
  double t4363;
  double t4370;
  double t4371;
  double t4589;
  double t4590;
  double t4591;
  double t4395;
  double t4399;
  double t4400;
  double t4605;
  double t4607;
  double t4608;
  double t4434;
  double t4441;
  double t4442;
  double t4618;
  double t4619;
  double t4620;
  double t4466;
  double t4470;
  double t4471;
  double t4492;
  double t4493;
  double t4494;
  double t4495;
  double t4496;
  double t4497;
  double t4498;
  double t4499;
  double t4626;
  double t4628;
  double t4630;
  double t4632;
  double t4634;
  double t4636;
  double t4684;
  double t4234;
  double t4239;
  double t4243;
  double t4244;
  double t4530;
  double t4531;
  double t4532;
  double t4533;
  double t4645;
  double t4646;
  double t4647;
  double t4648;
  double t4537;
  double t4538;
  double t4539;
  double t4568;
  double t4340;
  double t4671;
  double t4672;
  double t4673;
  double t4683;
  double t4685;
  double t4686;
  double t4687;
  double t4688;
  double t4689;
  double t4690;
  double t4691;
  double t4692;
  double t4693;
  double t4694;
  double t4695;
  double t4696;
  double t4582;
  double t4583;
  double t4584;
  double t4377;
  double t4381;
  double t4382;
  double t4697;
  double t4698;
  double t4699;
  double t4700;
  double t4701;
  double t4500;
  double t4501;
  double t4502;
  double t4503;
  double t4743;
  double t4744;
  double t4745;
  double t4746;
  double t4765;
  double t4767;
  double t4755;
  double t4756;
  double t4757;
  double t4758;
  double t4759;
  double t4760;
  double t4761;
  double t4762;
  double t4763;
  double t4764;
  double t4245;
  double t4534;
  double t4649;
  double t4650;
  double t4770;
  double t4771;
  double t4797;
  double t4798;
  double t4504;
  double t4624;
  double t4747;
  double t4748;
  double t4791;
  double t4792;
  double t4802;
  double t4222;
  double t4227;
  double t4231;
  double t4232;
  double t4525;
  double t4526;
  double t4527;
  double t4528;
  double t4639;
  double t4640;
  double t4641;
  double t4642;
  double t4543;
  double t4544;
  double t4545;
  double t4597;
  double t4411;
  double t4711;
  double t4712;
  double t4713;
  double t4611;
  double t4612;
  double t4613;
  double t4448;
  double t4452;
  double t4453;
  double t4723;
  double t4724;
  double t4725;
  double t4726;
  double t4727;
  double t4505;
  double t4506;
  double t4507;
  double t4508;
  double t4749;
  double t4750;
  double t4751;
  double t4752;
  double t4823;
  double t4825;
  double t4233;
  double t4529;
  double t4643;
  double t4644;
  double t4828;
  double t4829;
  double t4855;
  double t4856;
  double t4509;
  double t4625;
  double t4753;
  double t4754;
  double t4849;
  double t4850;
  t3844 = Sin(var2[2]);
  t749 = Cos(var2[2]);
  t3863 = Cos(var2[3]);
  t3868 = Sin(var2[3]);
  t3945 = Cos(var2[4]);
  t3950 = Sin(var2[4]);
  t3969 = t3863*t3945;
  t3972 = -1.*t3868*t3950;
  t3973 = t3969 + t3972;
  t4025 = Cos(var2[5]);
  t4027 = Sin(var2[5]);
  t4048 = Cos(var2[6]);
  t4058 = Sin(var2[6]);
  t4078 = t4025*t4048;
  t4079 = -1.*t4027*t4058;
  t4083 = t4078 + t4079;
  t3927 = t749*t3863;
  t3929 = -1.*t3844*t3868;
  t3930 = t3927 + t3929;
  t3865 = t3863*t3844;
  t3917 = t749*t3868;
  t3918 = t3865 + t3917;
  t3948 = -1.*t3945*t3868;
  t3953 = -1.*t3863*t3950;
  t3961 = t3948 + t3953;
  t3962 = t3844*t3961;
  t3975 = t749*t3973;
  t3976 = t3962 + t3975;
  t3988 = t3945*t3868;
  t3991 = t3863*t3950;
  t4002 = t3988 + t3991;
  t4003 = t749*t4002;
  t4006 = t3844*t3973;
  t4014 = t4003 + t4006;
  t4034 = t749*t4025;
  t4035 = -1.*t3844*t4027;
  t4036 = t4034 + t4035;
  t4026 = t4025*t3844;
  t4028 = t749*t4027;
  t4029 = t4026 + t4028;
  t4052 = -1.*t4048*t4027;
  t4059 = -1.*t4025*t4058;
  t4068 = t4052 + t4059;
  t4072 = t3844*t4068;
  t4084 = t749*t4083;
  t4085 = t4072 + t4084;
  t4092 = t4048*t4027;
  t4097 = t4025*t4058;
  t4098 = t4092 + t4097;
  t4099 = t749*t4098;
  t4100 = t3844*t4083;
  t4101 = t4099 + t4100;
  t4173 = -1.*t3945;
  t4174 = 1. + t4173;
  t4177 = 0.4*t4174;
  t4178 = 0.64*t3945;
  t4179 = t4177 + t4178;
  t4180 = t4179*t3868;
  t4181 = 0.24*t3863*t3950;
  t4182 = t4180 + t4181;
  t4184 = t3863*t4179;
  t4185 = -0.24*t3868*t3950;
  t4186 = t4184 + t4185;
  t4200 = -1.*t4048;
  t4201 = 1. + t4200;
  t4202 = 0.4*t4201;
  t4203 = 0.64*t4048;
  t4204 = t4202 + t4203;
  t4205 = t4204*t4027;
  t4206 = 0.24*t4025*t4058;
  t4207 = t4205 + t4206;
  t4211 = t4025*t4204;
  t4212 = -0.24*t4027*t4058;
  t4213 = t4211 + t4212;
  t4110 = t749*t3961;
  t4111 = -1.*t3844*t3973;
  t4112 = t4110 + t4111;
  t4105 = -1.*t3863*t3844;
  t4106 = -1.*t749*t3868;
  t4107 = t4105 + t4106;
  t4240 = t4179*t3950;
  t4241 = -0.24*t3945*t3950;
  t4242 = t4240 + t4241;
  t4122 = -1.*t3844*t4002;
  t4126 = t4122 + t3975;
  t4235 = t4179*t3945;
  t4236 = Power(t3950,2);
  t4237 = 0.24*t4236;
  t4238 = t4235 + t4237;
  t4158 = t749*t4068;
  t4159 = -1.*t3844*t4083;
  t4160 = t4158 + t4159;
  t4137 = -1.*t4025*t3844;
  t4144 = -1.*t749*t4027;
  t4149 = t4137 + t4144;
  t4228 = t4204*t4058;
  t4229 = -0.24*t4048*t4058;
  t4230 = t4228 + t4229;
  t4162 = -1.*t3844*t4098;
  t4163 = t4162 + t4084;
  t4223 = t4204*t4048;
  t4224 = Power(t4058,2);
  t4225 = 0.24*t4224;
  t4226 = t4223 + t4225;
  t3934 = Power(t3930,2);
  t4037 = Power(t4036,2);
  t4167 = Power(t3863,2);
  t4168 = 0.11*t4167;
  t4169 = Power(t3868,2);
  t4170 = 0.11*t4169;
  t4171 = t4168 + t4170;
  t4183 = -1.*t4182*t3973;
  t4187 = -1.*t3961*t4186;
  t4188 = t4183 + t4187;
  t4190 = t4182*t4002;
  t4191 = t3973*t4186;
  t4192 = t4190 + t4191;
  t4194 = Power(t4025,2);
  t4195 = 0.11*t4194;
  t4196 = Power(t4027,2);
  t4197 = 0.11*t4196;
  t4198 = t4195 + t4197;
  t4210 = -1.*t4207*t4083;
  t4214 = -1.*t4068*t4213;
  t4215 = t4210 + t4214;
  t4217 = t4207*t4098;
  t4218 = t4083*t4213;
  t4219 = t4217 + t4218;
  t4246 = -1.*var1[6];
  t4247 = var3[4] + t4246;
  t4249 = -1.*var1[5];
  t4250 = var3[3] + t4249;
  t4251 = 0.748*t4107;
  t4332 = -1.*t3863*t3945;
  t4333 = t3868*t3950;
  t4334 = t4332 + t4333;
  t4335 = t3844*t4334;
  t4336 = t4110 + t4335;
  t4266 = -1.*var1[0];
  t4267 = var3[0] + t4266;
  t4268 = 13.6*t4107*t3930;
  t4269 = 13.6*t3918*t3930;
  t4278 = -1.*var1[1];
  t4279 = var3[1] + t4278;
  t4280 = Power(t4107,2);
  t4281 = 6.8*t4280;
  t4282 = 6.8*t4107*t3918;
  t4283 = 6.8*t3934;
  t4284 = -1.*t749*t3863;
  t4285 = t3844*t3868;
  t4286 = t4284 + t4285;
  t4287 = 6.8*t3930*t4286;
  t4288 = -1.*t3844*t3961;
  t4320 = -1.*var1[2];
  t4321 = var3[2] + t4320;
  t4323 = 6.8*t4107*t4171;
  t4355 = -1.*t4179*t3868;
  t4356 = -0.24*t3863*t3950;
  t4357 = t4355 + t4356;
  t4337 = 0.768*t4247*t4336;
  t4338 = 3.2*t4242*t3976;
  t4339 = 3.2*t4238*t4336;
  t4342 = 6.4*t3976*t4014;
  t4343 = 6.4*t3976*t4336;
  t4346 = 3.2*t3976*t4126;
  t4347 = 3.2*t4112*t4014;
  t4348 = t749*t4334;
  t4349 = t4288 + t4348;
  t4350 = 3.2*t3976*t4349;
  t4351 = 3.2*t4112*t4336;
  t4354 = 3.2*t3976*t4188;
  t4359 = t4182*t3973;
  t4360 = t3961*t4186;
  t4364 = 3.2*t4192*t4336;
  t4388 = -0.24*t3945*t3868;
  t4389 = t4388 + t4356;
  t4366 = -1.*t3961*t4182;
  t4391 = 0.24*t3863*t3945;
  t4392 = t4391 + t4185;
  t4368 = -1.*t4186*t4334;
  t4256 = -1.*var1[4];
  t4257 = var3[6] + t4256;
  t4259 = -1.*var1[3];
  t4260 = var3[5] + t4259;
  t4261 = 0.748*t4149;
  t4403 = -1.*t4025*t4048;
  t4404 = t4027*t4058;
  t4405 = t4403 + t4404;
  t4406 = t3844*t4405;
  t4407 = t4158 + t4406;
  t4272 = 13.6*t4149*t4036;
  t4273 = 13.6*t4029*t4036;
  t4299 = Power(t4149,2);
  t4300 = 6.8*t4299;
  t4301 = 6.8*t4149*t4029;
  t4302 = 6.8*t4037;
  t4303 = -1.*t749*t4025;
  t4304 = t3844*t4027;
  t4305 = t4303 + t4304;
  t4306 = 6.8*t4036*t4305;
  t4307 = -1.*t3844*t4068;
  t4326 = 6.8*t4149*t4198;
  t4426 = -1.*t4204*t4027;
  t4427 = -0.24*t4025*t4058;
  t4428 = t4426 + t4427;
  t4408 = 0.768*t4257*t4407;
  t4409 = 3.2*t4230*t4085;
  t4410 = 3.2*t4226*t4407;
  t4413 = 6.4*t4085*t4101;
  t4414 = 6.4*t4085*t4407;
  t4417 = 3.2*t4085*t4163;
  t4418 = 3.2*t4160*t4101;
  t4419 = t749*t4405;
  t4420 = t4307 + t4419;
  t4421 = 3.2*t4085*t4420;
  t4422 = 3.2*t4160*t4407;
  t4425 = 3.2*t4085*t4215;
  t4430 = t4207*t4083;
  t4431 = t4068*t4213;
  t4435 = 3.2*t4219*t4407;
  t4459 = -0.24*t4048*t4027;
  t4460 = t4459 + t4427;
  t4437 = -1.*t4068*t4207;
  t4462 = 0.24*t4025*t4048;
  t4463 = t4462 + t4212;
  t4439 = -1.*t4213*t4405;
  t1568 = Power(t749,2);
  t3858 = Power(t3844,2);
  t3923 = Power(t3918,2);
  t3980 = Power(t3976,2);
  t4021 = Power(t4014,2);
  t4030 = Power(t4029,2);
  t4086 = Power(t4085,2);
  t4102 = Power(t4101,2);
  t4108 = -6.8*t4107*t3930;
  t4109 = -6.8*t3918*t3930;
  t4121 = -3.2*t3976*t4112;
  t4133 = -3.2*t4126*t4014;
  t4152 = -6.8*t4149*t4036;
  t4157 = -6.8*t4029*t4036;
  t4161 = -3.2*t4085*t4160;
  t4164 = -3.2*t4163*t4101;
  t4165 = t4108 + t4109 + t4121 + t4133 + t4152 + t4157 + t4161 + t4164;
  t2697 = -12.*t1568;
  t3860 = -12.*t3858;
  t3944 = -6.8*t3934;
  t4292 = Power(t4126,2);
  t4294 = Power(t4112,2);
  t4038 = -6.8*t4037;
  t4311 = Power(t4163,2);
  t4313 = Power(t4160,2);
  t4289 = -1.*t749*t3973;
  t4290 = t4288 + t4289;
  t4296 = -1.*t749*t4002;
  t4297 = t4296 + t4111;
  t4308 = -1.*t749*t4083;
  t4309 = t4307 + t4308;
  t4315 = -1.*t749*t4098;
  t4316 = t4315 + t4159;
  t4291 = 3.2*t4290*t3976;
  t4293 = 3.2*t4292;
  t4295 = 3.2*t4294;
  t4298 = 3.2*t4297*t4014;
  t4310 = 3.2*t4309*t4085;
  t4312 = 3.2*t4311;
  t4314 = 3.2*t4313;
  t4317 = 3.2*t4316*t4101;
  t4318 = t4281 + t4282 + t4283 + t4287 + t4291 + t4293 + t4295 + t4298 + t4300 + t4301 + t4302 + t4306 + t4310 + t4312 + t4314 + t4317;
  t4166 = -2.88*t749;
  t4536 = 0.748*t4286;
  t4547 = 13.6*t4107*t4286;
  t4352 = t4281 + t4282 + t4283 + t4287 + t4346 + t4347 + t4350 + t4351;
  t4556 = 6.8*t4286*t4171;
  t4358 = t4357*t3973;
  t4361 = t4002*t4186;
  t4362 = t4358 + t4359 + t4360 + t4361;
  t4365 = -1.*t3961*t4357;
  t4367 = -1.*t3973*t4186;
  t4369 = t4365 + t4366 + t4367 + t4368;
  t4565 = 0.768*t4247*t4349;
  t4378 = Power(t3945,2);
  t4379 = -0.24*t4378;
  t4380 = t4235 + t4379;
  t4566 = 3.2*t4242*t4112;
  t4374 = -1.*t4179*t3950;
  t4375 = 0.24*t3945*t3950;
  t4376 = t4374 + t4375;
  t4567 = 3.2*t4238*t4349;
  t4570 = 6.4*t4126*t4112;
  t4571 = 6.4*t4112*t4349;
  t4386 = t4346 + t4347 + t4350 + t4351;
  t4575 = 3.2*t4112*t4188;
  t4390 = t4389*t3973;
  t4393 = t4002*t4392;
  t4394 = t4390 + t4359 + t4360 + t4393;
  t4577 = 3.2*t4192*t4349;
  t4396 = -1.*t3961*t4389;
  t4397 = -1.*t3973*t4392;
  t4398 = t4396 + t4366 + t4397 + t4368;
  t4542 = 0.748*t4305;
  t4550 = 13.6*t4149*t4305;
  t4423 = t4300 + t4301 + t4302 + t4306 + t4417 + t4418 + t4421 + t4422;
  t4559 = 6.8*t4305*t4198;
  t4429 = t4428*t4083;
  t4432 = t4098*t4213;
  t4433 = t4429 + t4430 + t4431 + t4432;
  t4436 = -1.*t4068*t4428;
  t4438 = -1.*t4083*t4213;
  t4440 = t4436 + t4437 + t4438 + t4439;
  t4594 = 0.768*t4257*t4420;
  t4449 = Power(t4048,2);
  t4450 = -0.24*t4449;
  t4451 = t4223 + t4450;
  t4595 = 3.2*t4230*t4160;
  t4445 = -1.*t4204*t4058;
  t4446 = 0.24*t4048*t4058;
  t4447 = t4445 + t4446;
  t4596 = 3.2*t4226*t4420;
  t4599 = 6.4*t4163*t4160;
  t4600 = 6.4*t4160*t4420;
  t4457 = t4417 + t4418 + t4421 + t4422;
  t4604 = 3.2*t4160*t4215;
  t4461 = t4460*t4083;
  t4464 = t4098*t4463;
  t4465 = t4461 + t4430 + t4431 + t4464;
  t4606 = 3.2*t4219*t4420;
  t4467 = -1.*t4068*t4460;
  t4468 = -1.*t4083*t4463;
  t4469 = t4467 + t4437 + t4468 + t4439;
  t4483 = 6.8*t4107*t3930;
  t4484 = 6.8*t3918*t3930;
  t4485 = 3.2*t3976*t4112;
  t4486 = 3.2*t4126*t4014;
  t4487 = 6.8*t4149*t4036;
  t4488 = 6.8*t4029*t4036;
  t4489 = 3.2*t4085*t4160;
  t4490 = 3.2*t4163*t4101;
  t4491 = t4483 + t4484 + t4485 + t4486 + t4487 + t4488 + t4489 + t4490;
  t4474 = 12.*t1568;
  t4475 = 12.*t3858;
  t4322 = -2.88*t3844;
  t4324 = 3.2*t4126*t4188;
  t4325 = 3.2*t4112*t4192;
  t4327 = 3.2*t4163*t4215;
  t4328 = 3.2*t4160*t4219;
  t4329 = t4322 + t4323 + t4324 + t4325 + t4326 + t4327 + t4328;
  t4252 = 3.2*t4242*t4126;
  t4253 = 3.2*t4238*t4112;
  t4254 = t4251 + t4252 + t4253;
  t4262 = 3.2*t4230*t4163;
  t4263 = 3.2*t4226*t4160;
  t4264 = t4261 + t4262 + t4263;
  t4172 = -6.8*t3930*t4171;
  t4189 = -3.2*t4014*t4188;
  t4193 = -3.2*t3976*t4192;
  t4199 = -6.8*t4036*t4198;
  t4216 = -3.2*t4101*t4215;
  t4220 = -3.2*t4085*t4219;
  t4221 = t4166 + t4172 + t4189 + t4193 + t4199 + t4216 + t4220;
  t4517 = 2.88*t3844;
  t4518 = -6.8*t4107*t4171;
  t4519 = -3.2*t4126*t4188;
  t4520 = -3.2*t4112*t4192;
  t4521 = -6.8*t4149*t4198;
  t4522 = -3.2*t4163*t4215;
  t4523 = -3.2*t4160*t4219;
  t4524 = t4517 + t4518 + t4519 + t4520 + t4521 + t4522 + t4523;
  t4557 = 3.2*t4297*t4188;
  t4558 = 3.2*t4290*t4192;
  t4560 = 3.2*t4316*t4215;
  t4561 = 3.2*t4309*t4219;
  t4562 = t4166 + t4556 + t4557 + t4558 + t4559 + t4560 + t4561;
  t4651 = 0.4*t4174*t4286;
  t4652 = -0.4*t3918*t3950;
  t4653 = t3945*t4286;
  t4654 = t3918*t3950;
  t4655 = t4653 + t4654;
  t4656 = 0.8*t4655;
  t4657 = t4651 + t4652 + t4656;
  t4658 = -1.*var4[2]*t4657;
  t4659 = 0.4*t4174*t4107;
  t4660 = -0.4*t4286*t3950;
  t4661 = t3945*t4107;
  t4662 = t4286*t3950;
  t4663 = t4661 + t4662;
  t4664 = 0.8*t4663;
  t4665 = t4659 + t4660 + t4664;
  t4666 = -1.*var4[0]*t4665;
  t4576 = 3.2*t4112*t4362;
  t4578 = 3.2*t4126*t4369;
  t4579 = t4556 + t4575 + t4576 + t4577 + t4578;
  t4363 = 3.2*t3976*t4362;
  t4370 = 3.2*t4014*t4369;
  t4371 = t4323 + t4354 + t4363 + t4364 + t4370;
  t4589 = 3.2*t4112*t4394;
  t4590 = 3.2*t4126*t4398;
  t4591 = t4575 + t4589 + t4577 + t4590;
  t4395 = 3.2*t3976*t4394;
  t4399 = 3.2*t4014*t4398;
  t4400 = t4354 + t4395 + t4364 + t4399;
  t4605 = 3.2*t4160*t4433;
  t4607 = 3.2*t4163*t4440;
  t4608 = t4559 + t4604 + t4605 + t4606 + t4607;
  t4434 = 3.2*t4085*t4433;
  t4441 = 3.2*t4101*t4440;
  t4442 = t4326 + t4425 + t4434 + t4435 + t4441;
  t4618 = 3.2*t4160*t4465;
  t4619 = 3.2*t4163*t4469;
  t4620 = t4604 + t4618 + t4606 + t4619;
  t4466 = 3.2*t4085*t4465;
  t4470 = 3.2*t4101*t4469;
  t4471 = t4425 + t4466 + t4435 + t4470;
  t4492 = 2.88*t749;
  t4493 = 6.8*t3930*t4171;
  t4494 = 3.2*t4014*t4188;
  t4495 = 3.2*t3976*t4192;
  t4496 = 6.8*t4036*t4198;
  t4497 = 3.2*t4101*t4215;
  t4498 = 3.2*t4085*t4219;
  t4499 = t4492 + t4493 + t4494 + t4495 + t4496 + t4497 + t4498;
  t4626 = Power(t4171,2);
  t4628 = Power(t4188,2);
  t4630 = Power(t4192,2);
  t4632 = Power(t4198,2);
  t4634 = Power(t4215,2);
  t4636 = Power(t4219,2);
  t4684 = 0.4*t4107*t3950;
  t4234 = -0.748*t3930;
  t4239 = -3.2*t4238*t3976;
  t4243 = -3.2*t4242*t4014;
  t4244 = t4234 + t4239 + t4243;
  t4530 = -0.748*t4107;
  t4531 = -3.2*t4242*t4126;
  t4532 = -3.2*t4238*t4112;
  t4533 = t4530 + t4531 + t4532;
  t4645 = -0.748*t4171;
  t4646 = -3.2*t4242*t4188;
  t4647 = -3.2*t4238*t4192;
  t4648 = -0.67 + t4645 + t4646 + t4647;
  t4537 = 3.2*t4238*t4290;
  t4538 = 3.2*t4242*t4297;
  t4539 = t4536 + t4537 + t4538;
  t4568 = t4536 + t4566 + t4567;
  t4340 = t4251 + t4338 + t4339;
  t4671 = 3.2*t4238*t4362;
  t4672 = 3.2*t4242*t4369;
  t4673 = t4671 + t4672;
  t4683 = -0.4*t3945*t4286;
  t4685 = -1.*t4107*t3950;
  t4686 = t4653 + t4685;
  t4687 = 0.8*t4686;
  t4688 = t4683 + t4684 + t4687;
  t4689 = -1.*var4[2]*t4688;
  t4690 = -0.4*t3945*t4107;
  t4691 = 0.4*t3930*t3950;
  t4692 = -1.*t3930*t3950;
  t4693 = t4661 + t4692;
  t4694 = 0.8*t4693;
  t4695 = t4690 + t4691 + t4694;
  t4696 = -1.*var4[0]*t4695;
  t4582 = 3.2*t4380*t4126;
  t4583 = 3.2*t4376*t4112;
  t4584 = t4582 + t4566 + t4583 + t4567;
  t4377 = 3.2*t4376*t3976;
  t4381 = 3.2*t4380*t4014;
  t4382 = t4338 + t4377 + t4381 + t4339;
  t4697 = 3.2*t4380*t4188;
  t4698 = 3.2*t4376*t4192;
  t4699 = 3.2*t4238*t4394;
  t4700 = 3.2*t4242*t4398;
  t4701 = t4697 + t4698 + t4699 + t4700;
  t4500 = 0.748*t3930;
  t4501 = 3.2*t4238*t3976;
  t4502 = 3.2*t4242*t4014;
  t4503 = t4500 + t4501 + t4502;
  t4743 = 0.748*t4171;
  t4744 = 3.2*t4242*t4188;
  t4745 = 3.2*t4238*t4192;
  t4746 = 0.67 + t4743 + t4744 + t4745;
  t4765 = Power(t4242,2);
  t4767 = Power(t4238,2);
  t4755 = -0.4*t4174*t3930;
  t4756 = t3945*t3930;
  t4757 = t4107*t3950;
  t4758 = t4756 + t4757;
  t4759 = -0.8*t4758;
  t4760 = t4755 + t4684 + t4759;
  t4761 = -0.4*t4174*t4107;
  t4762 = 0.4*t4286*t3950;
  t4763 = -0.8*t4663;
  t4764 = t4761 + t4762 + t4763;
  t4245 = -0.768*t3976;
  t4534 = -0.768*t4112;
  t4649 = -0.768*t4192;
  t4650 = -0.2 + t4649;
  t4770 = -0.768*t4238;
  t4771 = -0.2 + t4770;
  t4797 = 0.768*t4279*t4349;
  t4798 = 0.768*t4267*t4336;
  t4504 = 0.768*t3976;
  t4624 = 0.768*t4112;
  t4747 = 0.768*t4192;
  t4748 = 0.2 + t4747;
  t4791 = 0.768*t4238;
  t4792 = 0.2 + t4791;
  t4802 = 0.4*t3945*t3930;
  t4222 = -0.748*t4036;
  t4227 = -3.2*t4226*t4085;
  t4231 = -3.2*t4230*t4101;
  t4232 = t4222 + t4227 + t4231;
  t4525 = -0.748*t4149;
  t4526 = -3.2*t4230*t4163;
  t4527 = -3.2*t4226*t4160;
  t4528 = t4525 + t4526 + t4527;
  t4639 = -0.748*t4198;
  t4640 = -3.2*t4230*t4215;
  t4641 = -3.2*t4226*t4219;
  t4642 = -0.67 + t4639 + t4640 + t4641;
  t4543 = 3.2*t4226*t4309;
  t4544 = 3.2*t4230*t4316;
  t4545 = t4542 + t4543 + t4544;
  t4597 = t4542 + t4595 + t4596;
  t4411 = t4261 + t4409 + t4410;
  t4711 = 3.2*t4226*t4433;
  t4712 = 3.2*t4230*t4440;
  t4713 = t4711 + t4712;
  t4611 = 3.2*t4451*t4163;
  t4612 = 3.2*t4447*t4160;
  t4613 = t4611 + t4595 + t4612 + t4596;
  t4448 = 3.2*t4447*t4085;
  t4452 = 3.2*t4451*t4101;
  t4453 = t4409 + t4448 + t4452 + t4410;
  t4723 = 3.2*t4451*t4215;
  t4724 = 3.2*t4447*t4219;
  t4725 = 3.2*t4226*t4465;
  t4726 = 3.2*t4230*t4469;
  t4727 = t4723 + t4724 + t4725 + t4726;
  t4505 = 0.748*t4036;
  t4506 = 3.2*t4226*t4085;
  t4507 = 3.2*t4230*t4101;
  t4508 = t4505 + t4506 + t4507;
  t4749 = 0.748*t4198;
  t4750 = 3.2*t4230*t4215;
  t4751 = 3.2*t4226*t4219;
  t4752 = 0.67 + t4749 + t4750 + t4751;
  t4823 = Power(t4230,2);
  t4825 = Power(t4226,2);
  t4233 = -0.768*t4085;
  t4529 = -0.768*t4160;
  t4643 = -0.768*t4219;
  t4644 = -0.2 + t4643;
  t4828 = -0.768*t4226;
  t4829 = -0.2 + t4828;
  t4855 = 0.768*t4279*t4420;
  t4856 = 0.768*t4267*t4407;
  t4509 = 0.768*t4085;
  t4625 = 0.768*t4160;
  t4753 = 0.768*t4219;
  t4754 = 0.2 + t4753;
  t4849 = 0.768*t4226;
  t4850 = 0.2 + t4849;
  p_output1[0]=t2697 + t3860 - 6.8*t3923 + t3944 - 3.2*t3980 - 3.2*t4021 - 6.8*t4030 + t4038 - 3.2*t4086 - 3.2*t4102;
  p_output1[1]=t4165;
  p_output1[2]=t4221;
  p_output1[3]=t4232;
  p_output1[4]=t4233;
  p_output1[5]=t4244;
  p_output1[6]=t4245;
  p_output1[7]=0.768*t4112*t4247 + t4250*t4254 + 0.768*t4160*t4257 + t4260*t4264 + t4267*(6.4*t3976*t4112 + 6.4*t4014*t4126 + 6.4*t4085*t4160 + 6.4*t4101*t4163 + t4268 + t4269 + t4272 + t4273) + t4279*t4318 + t4321*t4329;
  p_output1[8]=t4337 + t4250*t4340 + t4267*(t4268 + t4269 + t4342 + t4343) + t4279*t4352 + t4321*t4371;
  p_output1[9]=t4337 + t4267*(t4342 + t4343) + t4250*t4382 + t4279*t4386 + t4321*t4400;
  p_output1[10]=t4408 + t4260*t4411 + t4267*(t4272 + t4273 + t4413 + t4414) + t4279*t4423 + t4321*t4442;
  p_output1[11]=t4408 + t4267*(t4413 + t4414) + t4260*t4453 + t4279*t4457 + t4321*t4471;
  p_output1[12]=6.8*t3923 + 3.2*t3980 + 3.2*t4021 + 6.8*t4030 + 3.2*t4086 + 3.2*t4102 + t4283 + t4302 + t4474 + t4475;
  p_output1[13]=t4491;
  p_output1[14]=t4499;
  p_output1[15]=t4503;
  p_output1[16]=t4504;
  p_output1[17]=t4508;
  p_output1[18]=t4509;
  p_output1[19]=-1.;
  p_output1[20]=t4165;
  p_output1[21]=t2697 + t3860 + t3944 + t4038 - 6.8*t4280 - 3.2*t4292 - 3.2*t4294 - 6.8*t4299 - 3.2*t4311 - 3.2*t4313;
  p_output1[22]=t4524;
  p_output1[23]=t4528;
  p_output1[24]=t4529;
  p_output1[25]=t4533;
  p_output1[26]=t4534;
  p_output1[27]=0.768*t4247*t4290 + 0.768*t4257*t4309 + t4267*t4318 + t4250*t4539 + t4260*t4545 + t4279*(t4268 + t4272 + 6.4*t4112*t4290 + 6.4*t4126*t4297 + 6.4*t4160*t4309 + 6.4*t4163*t4316 + t4547 + t4550) + t4321*t4562;
  p_output1[28]=t4267*t4352 + t4565 + t4250*t4568 + t4279*(t4268 + t4547 + t4570 + t4571) + t4321*t4579;
  p_output1[29]=t4267*t4386 + t4565 + t4279*(t4570 + t4571) + t4250*t4584 + t4321*t4591;
  p_output1[30]=t4267*t4423 + t4594 + t4260*t4597 + t4279*(t4272 + t4550 + t4599 + t4600) + t4321*t4608;
  p_output1[31]=t4267*t4457 + t4594 + t4279*(t4599 + t4600) + t4260*t4613 + t4321*t4620;
  p_output1[32]=t4491;
  p_output1[33]=t4281 + t4283 + t4293 + t4295 + t4300 + t4302 + t4312 + t4314 + t4474 + t4475;
  p_output1[34]=t4329;
  p_output1[35]=t4254;
  p_output1[36]=t4624;
  p_output1[37]=t4264;
  p_output1[38]=t4625;
  p_output1[39]=-1.;
  p_output1[40]=t4221;
  p_output1[41]=t4524;
  p_output1[42]=-3.3612 - 6.8*t4626 - 3.2*t4628 - 3.2*t4630 - 6.8*t4632 - 3.2*t4634 - 3.2*t4636;
  p_output1[43]=t4642;
  p_output1[44]=t4644;
  p_output1[45]=t4648;
  p_output1[46]=t4650;
  p_output1[47]=t4267*t4329 + t4279*t4562 + t4658 + t4666;
  p_output1[48]=0.768*t4247*t4362 + t4321*(6.4*t4192*t4362 + 6.4*t4188*t4369) + t4267*t4371 + t4279*t4579 + t4658 + t4666 + t4250*t4673;
  p_output1[49]=0.768*t4247*t4394 + t4321*(6.4*t4192*t4394 + 6.4*t4188*t4398) + t4267*t4400 + t4279*t4591 + t4689 + t4696 + t4250*t4701;
  p_output1[50]=0.768*t4257*t4433 + t4321*(6.4*t4219*t4433 + 6.4*t4215*t4440) + t4267*t4442 + t4279*t4608 + t4260*t4713;
  p_output1[51]=0.768*t4257*t4465 + t4321*(6.4*t4219*t4465 + 6.4*t4215*t4469) + t4267*t4471 + t4279*t4620 + t4260*t4727;
  p_output1[52]=t4499;
  p_output1[53]=t4329;
  p_output1[54]=3.3612 + 6.8*t4626 + 3.2*t4628 + 3.2*t4630 + 6.8*t4632 + 3.2*t4634 + 3.2*t4636;
  p_output1[55]=t4746;
  p_output1[56]=t4748;
  p_output1[57]=t4752;
  p_output1[58]=t4754;
  p_output1[59]=t4760;
  p_output1[60]=t4764;
  p_output1[61]=t4244;
  p_output1[62]=t4533;
  p_output1[63]=t4648;
  p_output1[64]=-1.58228 - 3.2*t4765 - 3.2*t4767;
  p_output1[65]=t4771;
  p_output1[66]=t4254*t4267 + t4279*t4539 + t4658 + t4666;
  p_output1[67]=t4267*t4340 + t4279*t4568 + t4658 + t4666 + t4321*t4673;
  p_output1[68]=0.768*t4247*t4376 + t4250*(6.4*t4238*t4376 + 6.4*t4242*t4380) + t4267*t4382 + t4279*t4584 + t4689 + t4696 + t4321*t4701;
  p_output1[69]=t4503;
  p_output1[70]=t4254;
  p_output1[71]=t4746;
  p_output1[72]=1.58228 + 3.2*t4765 + 3.2*t4767;
  p_output1[73]=t4792;
  p_output1[74]=t4760;
  p_output1[75]=t4764;
  p_output1[76]=t4245;
  p_output1[77]=t4534;
  p_output1[78]=t4650;
  p_output1[79]=t4771;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t4112*t4267 + 0.768*t4279*t4290 + t4689 + t4696;
  p_output1[82]=0.768*t4321*t4362 + t4689 + t4696 + t4797 + t4798;
  p_output1[83]=0.768*t4250*t4376 + 0.768*t4321*t4394 + t4797 + t4798 - 1.*(0.4*t3918*t3945 + t4691 + 0.8*(-1.*t3918*t3945 + t4692))*var4[0] - 1.*(t4684 + 0.8*(-1.*t3930*t3945 + t4685) + t4802)*var4[2];
  p_output1[84]=t4504;
  p_output1[85]=t4624;
  p_output1[86]=t4748;
  p_output1[87]=t4792;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t4652 - 0.8*(-1.*t3918*t3950 + t4756) + t4802;
  p_output1[90]=-0.4*t3930*t3950 + 0.4*t3945*t4107 - 0.8*t4693;
  p_output1[91]=t4232;
  p_output1[92]=t4528;
  p_output1[93]=t4642;
  p_output1[94]=-1.58228 - 3.2*t4823 - 3.2*t4825;
  p_output1[95]=t4829;
  p_output1[96]=t4264*t4267 + t4279*t4545;
  p_output1[97]=t4267*t4411 + t4279*t4597 + t4321*t4713;
  p_output1[98]=0.768*t4257*t4447 + t4260*(6.4*t4226*t4447 + 6.4*t4230*t4451) + t4267*t4453 + t4279*t4613 + t4321*t4727;
  p_output1[99]=t4508;
  p_output1[100]=t4264;
  p_output1[101]=t4752;
  p_output1[102]=1.58228 + 3.2*t4823 + 3.2*t4825;
  p_output1[103]=t4850;
  p_output1[104]=t4233;
  p_output1[105]=t4529;
  p_output1[106]=t4644;
  p_output1[107]=t4829;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t4160*t4267 + 0.768*t4279*t4309;
  p_output1[110]=0.768*t4321*t4433 + t4855 + t4856;
  p_output1[111]=0.768*t4260*t4447 + 0.768*t4321*t4465 + t4855 + t4856;
  p_output1[112]=t4509;
  p_output1[113]=t4625;
  p_output1[114]=t4754;
  p_output1[115]=t4850;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
