/*
 * Automatically Generated from Mathematica.
 * Wed 10 Feb 2021 14:38:13 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t499;
  double t92;
  double t741;
  double t853;
  double t1425;
  double t1519;
  double t1720;
  double t1729;
  double t1779;
  double t2894;
  double t2912;
  double t3013;
  double t3019;
  double t3058;
  double t3068;
  double t3070;
  double t1258;
  double t1270;
  double t1272;
  double t788;
  double t854;
  double t1046;
  double t1512;
  double t1526;
  double t1594;
  double t1649;
  double t1935;
  double t2045;
  double t2808;
  double t2809;
  double t2810;
  double t2811;
  double t2819;
  double t2843;
  double t2987;
  double t2990;
  double t2991;
  double t2899;
  double t2913;
  double t2916;
  double t3018;
  double t3026;
  double t3027;
  double t3046;
  double t3071;
  double t3072;
  double t3093;
  double t3098;
  double t3100;
  double t3105;
  double t3109;
  double t3110;
  double t3725;
  double t3770;
  double t3771;
  double t3780;
  double t3803;
  double t3806;
  double t3809;
  double t3824;
  double t3831;
  double t3855;
  double t3856;
  double t4125;
  double t4128;
  double t4136;
  double t4143;
  double t4144;
  double t4148;
  double t4150;
  double t4176;
  double t4239;
  double t4263;
  double t4269;
  double t3207;
  double t3231;
  double t3243;
  double t3127;
  double t3144;
  double t3198;
  double t4860;
  double t4861;
  double t4868;
  double t3327;
  double t3332;
  double t4817;
  double t4822;
  double t4828;
  double t4848;
  double t3383;
  double t3404;
  double t3406;
  double t3350;
  double t3352;
  double t3358;
  double t4582;
  double t4595;
  double t4657;
  double t3491;
  double t3524;
  double t4406;
  double t4478;
  double t4481;
  double t4493;
  double t1299;
  double t2992;
  double t3612;
  double t3613;
  double t3624;
  double t3687;
  double t3688;
  double t3826;
  double t3875;
  double t3886;
  double t3902;
  double t3903;
  double t3923;
  double t4007;
  double t4020;
  double t4070;
  double t4072;
  double t4081;
  double t4236;
  double t4281;
  double t4312;
  double t4346;
  double t4353;
  double t4355;
  double t4889;
  double t4920;
  double t4970;
  double t4975;
  double t4981;
  double t5562;
  double t5568;
  double t5571;
  double t5572;
  double t5576;
  double t5112;
  double t5113;
  double t5114;
  double t5115;
  double t5158;
  double t5179;
  double t5180;
  double t5185;
  double t5203;
  double t5210;
  double t5219;
  double t5224;
  double t5227;
  double t5258;
  double t5260;
  double t5449;
  double t5450;
  double t5457;
  double t5604;
  double t5605;
  double t5611;
  double t5579;
  double t5582;
  double t5583;
  double t5590;
  double t5592;
  double t5595;
  double t5596;
  double t5597;
  double t5598;
  double t5599;
  double t5600;
  double t5603;
  double t5618;
  double t5619;
  double t5625;
  double t5733;
  double t5734;
  double t5627;
  double t5736;
  double t5737;
  double t5632;
  double t5072;
  double t5073;
  double t5080;
  double t5089;
  double t5090;
  double t5748;
  double t5749;
  double t5750;
  double t5751;
  double t5752;
  double t5133;
  double t5134;
  double t5286;
  double t5287;
  double t5289;
  double t5290;
  double t5291;
  double t5294;
  double t5297;
  double t5298;
  double t5299;
  double t5548;
  double t5795;
  double t5796;
  double t5797;
  double t5753;
  double t5754;
  double t5756;
  double t5774;
  double t5783;
  double t5786;
  double t5787;
  double t5788;
  double t5789;
  double t5790;
  double t5791;
  double t5794;
  double t5799;
  double t5800;
  double t5817;
  double t5962;
  double t5963;
  double t5850;
  double t5965;
  double t5969;
  double t5869;
  double t317;
  double t516;
  double t1047;
  double t2782;
  double t2844;
  double t2917;
  double t3074;
  double t3111;
  double t3200;
  double t3201;
  double t3265;
  double t3346;
  double t3369;
  double t3375;
  double t3413;
  double t3528;
  double t3533;
  double t328;
  double t679;
  double t1307;
  double t5273;
  double t5275;
  double t3008;
  double t5343;
  double t5352;
  double t5261;
  double t5262;
  double t5279;
  double t5281;
  double t5310;
  double t5332;
  double t5361;
  double t5395;
  double t5269;
  double t5274;
  double t5277;
  double t5285;
  double t5334;
  double t5345;
  double t5356;
  double t5396;
  double t5410;
  double t3536;
  double t6334;
  double t6420;
  double t5601;
  double t6444;
  double t5617;
  double t5620;
  double t5623;
  double t5626;
  double t5628;
  double t5645;
  double t6478;
  double t5694;
  double t5695;
  double t5702;
  double t6483;
  double t5658;
  double t5663;
  double t5675;
  double t6491;
  double t6500;
  double t6503;
  double t5731;
  double t6527;
  double t5735;
  double t5738;
  double t5739;
  double t6551;
  double t5741;
  double t5742;
  double t5743;
  double t6399;
  double t6425;
  double t5792;
  double t6467;
  double t5798;
  double t5808;
  double t5814;
  double t5844;
  double t5860;
  double t5871;
  double t6594;
  double t5933;
  double t5936;
  double t5938;
  double t6595;
  double t5921;
  double t5929;
  double t5931;
  double t6630;
  double t6644;
  double t6645;
  double t5960;
  double t6655;
  double t5964;
  double t5971;
  double t5974;
  double t6664;
  double t5980;
  double t5982;
  double t5983;
  double t6052;
  double t6053;
  double t6054;
  double t6055;
  double t6056;
  double t6057;
  double t6072;
  double t6078;
  double t6093;
  double t6007;
  double t6009;
  double t5456;
  double t5544;
  double t5545;
  double t5549;
  double t5556;
  double t5558;
  double t5035;
  double t5047;
  double t5065;
  double t5098;
  double t5108;
  double t5109;
  double t3719;
  double t3893;
  double t4000;
  double t4124;
  double t4315;
  double t4364;
  double t4379;
  double t6196;
  double t6197;
  double t6202;
  double t6203;
  double t6206;
  double t6213;
  double t6216;
  double t6222;
  double t6447;
  double t6450;
  double t6468;
  double t6469;
  double t6470;
  double t6877;
  double t6896;
  double t6897;
  double t6907;
  double t6913;
  double t6916;
  double t6918;
  double t6921;
  double t6923;
  double t6925;
  double t6927;
  double t6931;
  double t6939;
  double t6946;
  double t6953;
  double t6961;
  double t6528;
  double t6554;
  double t6556;
  double t5624;
  double t5647;
  double t5650;
  double t6582;
  double t6583;
  double t6584;
  double t5740;
  double t5744;
  double t5745;
  double t6656;
  double t6665;
  double t6673;
  double t5816;
  double t5877;
  double t5879;
  double t6751;
  double t6757;
  double t6761;
  double t5976;
  double t5986;
  double t5987;
  double t6095;
  double t6096;
  double t6098;
  double t6100;
  double t6101;
  double t6102;
  double t6109;
  double t6112;
  double t6780;
  double t6788;
  double t6791;
  double t6798;
  double t6800;
  double t6802;
  double t7011;
  double t4812;
  double t4849;
  double t4875;
  double t4884;
  double t6275;
  double t6315;
  double t6322;
  double t6326;
  double t6842;
  double t6865;
  double t6866;
  double t6870;
  double t6337;
  double t6348;
  double t6362;
  double t6492;
  double t5584;
  double t6971;
  double t6972;
  double t6978;
  double t7009;
  double t7012;
  double t7021;
  double t7030;
  double t7041;
  double t7042;
  double t7045;
  double t7046;
  double t7047;
  double t7055;
  double t7056;
  double t7060;
  double t7066;
  double t6566;
  double t6567;
  double t6574;
  double t5691;
  double t5703;
  double t5704;
  double t7070;
  double t7072;
  double t7073;
  double t7077;
  double t7083;
  double t6113;
  double t6114;
  double t6115;
  double t6127;
  double t7323;
  double t7324;
  double t7340;
  double t7354;
  double t7540;
  double t7552;
  double t7466;
  double t7470;
  double t7477;
  double t7494;
  double t7507;
  double t7511;
  double t7515;
  double t7523;
  double t7526;
  double t7530;
  double t4885;
  double t6327;
  double t6871;
  double t6873;
  double t7575;
  double t7576;
  double t7773;
  double t7774;
  double t6138;
  double t6775;
  double t7360;
  double t7371;
  double t7732;
  double t7741;
  double t7794;
  double t4381;
  double t4574;
  double t4721;
  double t4722;
  double t6223;
  double t6228;
  double t6243;
  double t6246;
  double t6820;
  double t6826;
  double t6827;
  double t6828;
  double t6406;
  double t6407;
  double t6413;
  double t6642;
  double t5768;
  double t7120;
  double t7121;
  double t7124;
  double t6694;
  double t6706;
  double t6716;
  double t5932;
  double t5951;
  double t5952;
  double t7155;
  double t7172;
  double t7173;
  double t7179;
  double t7182;
  double t6139;
  double t6140;
  double t6152;
  double t6158;
  double t7379;
  double t7404;
  double t7406;
  double t7407;
  double t7959;
  double t7994;
  double t4809;
  double t6251;
  double t6829;
  double t6840;
  double t8006;
  double t8024;
  double t8228;
  double t8236;
  double t6160;
  double t6776;
  double t7442;
  double t7449;
  double t8191;
  double t8198;
  t499 = Sin(var2[2]);
  t92 = Cos(var2[2]);
  t741 = Cos(var2[3]);
  t853 = Sin(var2[3]);
  t1425 = Cos(var2[4]);
  t1519 = Sin(var2[4]);
  t1720 = t741*t1425;
  t1729 = -1.*t853*t1519;
  t1779 = t1720 + t1729;
  t2894 = Cos(var2[5]);
  t2912 = Sin(var2[5]);
  t3013 = Cos(var2[6]);
  t3019 = Sin(var2[6]);
  t3058 = t2894*t3013;
  t3068 = -1.*t2912*t3019;
  t3070 = t3058 + t3068;
  t1258 = t92*t741;
  t1270 = -1.*t499*t853;
  t1272 = t1258 + t1270;
  t788 = t741*t499;
  t854 = t92*t853;
  t1046 = t788 + t854;
  t1512 = -1.*t1425*t853;
  t1526 = -1.*t741*t1519;
  t1594 = t1512 + t1526;
  t1649 = t499*t1594;
  t1935 = t92*t1779;
  t2045 = t1649 + t1935;
  t2808 = t1425*t853;
  t2809 = t741*t1519;
  t2810 = t2808 + t2809;
  t2811 = t92*t2810;
  t2819 = t499*t1779;
  t2843 = t2811 + t2819;
  t2987 = t92*t2894;
  t2990 = -1.*t499*t2912;
  t2991 = t2987 + t2990;
  t2899 = t2894*t499;
  t2913 = t92*t2912;
  t2916 = t2899 + t2913;
  t3018 = -1.*t3013*t2912;
  t3026 = -1.*t2894*t3019;
  t3027 = t3018 + t3026;
  t3046 = t499*t3027;
  t3071 = t92*t3070;
  t3072 = t3046 + t3071;
  t3093 = t3013*t2912;
  t3098 = t2894*t3019;
  t3100 = t3093 + t3098;
  t3105 = t92*t3100;
  t3109 = t499*t3070;
  t3110 = t3105 + t3109;
  t3725 = -1.*t1425;
  t3770 = 1. + t3725;
  t3771 = 0.4*t3770;
  t3780 = 0.64*t1425;
  t3803 = t3771 + t3780;
  t3806 = t3803*t853;
  t3809 = 0.24*t741*t1519;
  t3824 = t3806 + t3809;
  t3831 = t741*t3803;
  t3855 = -0.24*t853*t1519;
  t3856 = t3831 + t3855;
  t4125 = -1.*t3013;
  t4128 = 1. + t4125;
  t4136 = 0.4*t4128;
  t4143 = 0.64*t3013;
  t4144 = t4136 + t4143;
  t4148 = t4144*t2912;
  t4150 = 0.24*t2894*t3019;
  t4176 = t4148 + t4150;
  t4239 = t2894*t4144;
  t4263 = -0.24*t2912*t3019;
  t4269 = t4239 + t4263;
  t3207 = t92*t1594;
  t3231 = -1.*t499*t1779;
  t3243 = t3207 + t3231;
  t3127 = -1.*t741*t499;
  t3144 = -1.*t92*t853;
  t3198 = t3127 + t3144;
  t4860 = t3803*t1519;
  t4861 = -0.24*t1425*t1519;
  t4868 = t4860 + t4861;
  t3327 = -1.*t499*t2810;
  t3332 = t3327 + t1935;
  t4817 = t3803*t1425;
  t4822 = Power(t1519,2);
  t4828 = 0.24*t4822;
  t4848 = t4817 + t4828;
  t3383 = t92*t3027;
  t3404 = -1.*t499*t3070;
  t3406 = t3383 + t3404;
  t3350 = -1.*t2894*t499;
  t3352 = -1.*t92*t2912;
  t3358 = t3350 + t3352;
  t4582 = t4144*t3019;
  t4595 = -0.24*t3013*t3019;
  t4657 = t4582 + t4595;
  t3491 = -1.*t499*t3100;
  t3524 = t3491 + t3071;
  t4406 = t4144*t3013;
  t4478 = Power(t3019,2);
  t4481 = 0.24*t4478;
  t4493 = t4406 + t4481;
  t1299 = Power(t1272,2);
  t2992 = Power(t2991,2);
  t3612 = Power(t741,2);
  t3613 = 0.11*t3612;
  t3624 = Power(t853,2);
  t3687 = 0.11*t3624;
  t3688 = t3613 + t3687;
  t3826 = -1.*t3824*t1779;
  t3875 = -1.*t1594*t3856;
  t3886 = t3826 + t3875;
  t3902 = t3824*t2810;
  t3903 = t1779*t3856;
  t3923 = t3902 + t3903;
  t4007 = Power(t2894,2);
  t4020 = 0.11*t4007;
  t4070 = Power(t2912,2);
  t4072 = 0.11*t4070;
  t4081 = t4020 + t4072;
  t4236 = -1.*t4176*t3070;
  t4281 = -1.*t3027*t4269;
  t4312 = t4236 + t4281;
  t4346 = t4176*t3100;
  t4353 = t3070*t4269;
  t4355 = t4346 + t4353;
  t4889 = -1.*var1[6];
  t4920 = var3[4] + t4889;
  t4970 = -1.*var1[5];
  t4975 = var3[3] + t4970;
  t4981 = 0.748*t3198;
  t5562 = -1.*t741*t1425;
  t5568 = t853*t1519;
  t5571 = t5562 + t5568;
  t5572 = t499*t5571;
  t5576 = t3207 + t5572;
  t5112 = -1.*var1[0];
  t5113 = var3[0] + t5112;
  t5114 = 13.6*t3198*t1272;
  t5115 = 13.6*t1046*t1272;
  t5158 = -1.*var1[1];
  t5179 = var3[1] + t5158;
  t5180 = Power(t3198,2);
  t5185 = 6.8*t5180;
  t5203 = 6.8*t3198*t1046;
  t5210 = 6.8*t1299;
  t5219 = -1.*t92*t741;
  t5224 = t499*t853;
  t5227 = t5219 + t5224;
  t5258 = 6.8*t1272*t5227;
  t5260 = -1.*t499*t1594;
  t5449 = -1.*var1[2];
  t5450 = var3[2] + t5449;
  t5457 = 6.8*t3198*t3688;
  t5604 = -1.*t3803*t853;
  t5605 = -0.24*t741*t1519;
  t5611 = t5604 + t5605;
  t5579 = 0.768*t4920*t5576;
  t5582 = 3.2*t4868*t2045;
  t5583 = 3.2*t4848*t5576;
  t5590 = 6.4*t2045*t2843;
  t5592 = 6.4*t2045*t5576;
  t5595 = 3.2*t2045*t3332;
  t5596 = 3.2*t3243*t2843;
  t5597 = t92*t5571;
  t5598 = t5260 + t5597;
  t5599 = 3.2*t2045*t5598;
  t5600 = 3.2*t3243*t5576;
  t5603 = 3.2*t2045*t3886;
  t5618 = t3824*t1779;
  t5619 = t1594*t3856;
  t5625 = 3.2*t3923*t5576;
  t5733 = -0.24*t1425*t853;
  t5734 = t5733 + t5605;
  t5627 = -1.*t1594*t3824;
  t5736 = 0.24*t741*t1425;
  t5737 = t5736 + t3855;
  t5632 = -1.*t3856*t5571;
  t5072 = -1.*var1[4];
  t5073 = var3[6] + t5072;
  t5080 = -1.*var1[3];
  t5089 = var3[5] + t5080;
  t5090 = 0.748*t3358;
  t5748 = -1.*t2894*t3013;
  t5749 = t2912*t3019;
  t5750 = t5748 + t5749;
  t5751 = t499*t5750;
  t5752 = t3383 + t5751;
  t5133 = 13.6*t3358*t2991;
  t5134 = 13.6*t2916*t2991;
  t5286 = Power(t3358,2);
  t5287 = 6.8*t5286;
  t5289 = 6.8*t3358*t2916;
  t5290 = 6.8*t2992;
  t5291 = -1.*t92*t2894;
  t5294 = t499*t2912;
  t5297 = t5291 + t5294;
  t5298 = 6.8*t2991*t5297;
  t5299 = -1.*t499*t3027;
  t5548 = 6.8*t3358*t4081;
  t5795 = -1.*t4144*t2912;
  t5796 = -0.24*t2894*t3019;
  t5797 = t5795 + t5796;
  t5753 = 0.768*t5073*t5752;
  t5754 = 3.2*t4657*t3072;
  t5756 = 3.2*t4493*t5752;
  t5774 = 6.4*t3072*t3110;
  t5783 = 6.4*t3072*t5752;
  t5786 = 3.2*t3072*t3524;
  t5787 = 3.2*t3406*t3110;
  t5788 = t92*t5750;
  t5789 = t5299 + t5788;
  t5790 = 3.2*t3072*t5789;
  t5791 = 3.2*t3406*t5752;
  t5794 = 3.2*t3072*t4312;
  t5799 = t4176*t3070;
  t5800 = t3027*t4269;
  t5817 = 3.2*t4355*t5752;
  t5962 = -0.24*t3013*t2912;
  t5963 = t5962 + t5796;
  t5850 = -1.*t3027*t4176;
  t5965 = 0.24*t2894*t3013;
  t5969 = t5965 + t4263;
  t5869 = -1.*t4269*t5750;
  t317 = Power(t92,2);
  t516 = Power(t499,2);
  t1047 = Power(t1046,2);
  t2782 = Power(t2045,2);
  t2844 = Power(t2843,2);
  t2917 = Power(t2916,2);
  t3074 = Power(t3072,2);
  t3111 = Power(t3110,2);
  t3200 = -6.8*t3198*t1272;
  t3201 = -6.8*t1046*t1272;
  t3265 = -3.2*t2045*t3243;
  t3346 = -3.2*t3332*t2843;
  t3369 = -6.8*t3358*t2991;
  t3375 = -6.8*t2916*t2991;
  t3413 = -3.2*t3072*t3406;
  t3528 = -3.2*t3524*t3110;
  t3533 = t3200 + t3201 + t3265 + t3346 + t3369 + t3375 + t3413 + t3528;
  t328 = -12.*t317;
  t679 = -12.*t516;
  t1307 = -6.8*t1299;
  t5273 = Power(t3332,2);
  t5275 = Power(t3243,2);
  t3008 = -6.8*t2992;
  t5343 = Power(t3524,2);
  t5352 = Power(t3406,2);
  t5261 = -1.*t92*t1779;
  t5262 = t5260 + t5261;
  t5279 = -1.*t92*t2810;
  t5281 = t5279 + t3231;
  t5310 = -1.*t92*t3070;
  t5332 = t5299 + t5310;
  t5361 = -1.*t92*t3100;
  t5395 = t5361 + t3404;
  t5269 = 3.2*t5262*t2045;
  t5274 = 3.2*t5273;
  t5277 = 3.2*t5275;
  t5285 = 3.2*t5281*t2843;
  t5334 = 3.2*t5332*t3072;
  t5345 = 3.2*t5343;
  t5356 = 3.2*t5352;
  t5396 = 3.2*t5395*t3110;
  t5410 = t5185 + t5203 + t5210 + t5258 + t5269 + t5274 + t5277 + t5285 + t5287 + t5289 + t5290 + t5298 + t5334 + t5345 + t5356 + t5396;
  t3536 = -2.88*t92;
  t6334 = 0.748*t5227;
  t6420 = 13.6*t3198*t5227;
  t5601 = t5185 + t5203 + t5210 + t5258 + t5595 + t5596 + t5599 + t5600;
  t6444 = 6.8*t5227*t3688;
  t5617 = t5611*t1779;
  t5620 = t2810*t3856;
  t5623 = t5617 + t5618 + t5619 + t5620;
  t5626 = -1.*t1594*t5611;
  t5628 = -1.*t1779*t3856;
  t5645 = t5626 + t5627 + t5628 + t5632;
  t6478 = 0.768*t4920*t5598;
  t5694 = Power(t1425,2);
  t5695 = -0.24*t5694;
  t5702 = t4817 + t5695;
  t6483 = 3.2*t4868*t3243;
  t5658 = -1.*t3803*t1519;
  t5663 = 0.24*t1425*t1519;
  t5675 = t5658 + t5663;
  t6491 = 3.2*t4848*t5598;
  t6500 = 6.4*t3332*t3243;
  t6503 = 6.4*t3243*t5598;
  t5731 = t5595 + t5596 + t5599 + t5600;
  t6527 = 3.2*t3243*t3886;
  t5735 = t5734*t1779;
  t5738 = t2810*t5737;
  t5739 = t5735 + t5618 + t5619 + t5738;
  t6551 = 3.2*t3923*t5598;
  t5741 = -1.*t1594*t5734;
  t5742 = -1.*t1779*t5737;
  t5743 = t5741 + t5627 + t5742 + t5632;
  t6399 = 0.748*t5297;
  t6425 = 13.6*t3358*t5297;
  t5792 = t5287 + t5289 + t5290 + t5298 + t5786 + t5787 + t5790 + t5791;
  t6467 = 6.8*t5297*t4081;
  t5798 = t5797*t3070;
  t5808 = t3100*t4269;
  t5814 = t5798 + t5799 + t5800 + t5808;
  t5844 = -1.*t3027*t5797;
  t5860 = -1.*t3070*t4269;
  t5871 = t5844 + t5850 + t5860 + t5869;
  t6594 = 0.768*t5073*t5789;
  t5933 = Power(t3013,2);
  t5936 = -0.24*t5933;
  t5938 = t4406 + t5936;
  t6595 = 3.2*t4657*t3406;
  t5921 = -1.*t4144*t3019;
  t5929 = 0.24*t3013*t3019;
  t5931 = t5921 + t5929;
  t6630 = 3.2*t4493*t5789;
  t6644 = 6.4*t3524*t3406;
  t6645 = 6.4*t3406*t5789;
  t5960 = t5786 + t5787 + t5790 + t5791;
  t6655 = 3.2*t3406*t4312;
  t5964 = t5963*t3070;
  t5971 = t3100*t5969;
  t5974 = t5964 + t5799 + t5800 + t5971;
  t6664 = 3.2*t4355*t5789;
  t5980 = -1.*t3027*t5963;
  t5982 = -1.*t3070*t5969;
  t5983 = t5980 + t5850 + t5982 + t5869;
  t6052 = 6.8*t3198*t1272;
  t6053 = 6.8*t1046*t1272;
  t6054 = 3.2*t2045*t3243;
  t6055 = 3.2*t3332*t2843;
  t6056 = 6.8*t3358*t2991;
  t6057 = 6.8*t2916*t2991;
  t6072 = 3.2*t3072*t3406;
  t6078 = 3.2*t3524*t3110;
  t6093 = t6052 + t6053 + t6054 + t6055 + t6056 + t6057 + t6072 + t6078;
  t6007 = 12.*t317;
  t6009 = 12.*t516;
  t5456 = -2.88*t499;
  t5544 = 3.2*t3332*t3886;
  t5545 = 3.2*t3243*t3923;
  t5549 = 3.2*t3524*t4312;
  t5556 = 3.2*t3406*t4355;
  t5558 = t5456 + t5457 + t5544 + t5545 + t5548 + t5549 + t5556;
  t5035 = 3.2*t4868*t3332;
  t5047 = 3.2*t4848*t3243;
  t5065 = t4981 + t5035 + t5047;
  t5098 = 3.2*t4657*t3524;
  t5108 = 3.2*t4493*t3406;
  t5109 = t5090 + t5098 + t5108;
  t3719 = -6.8*t1272*t3688;
  t3893 = -3.2*t2843*t3886;
  t4000 = -3.2*t2045*t3923;
  t4124 = -6.8*t2991*t4081;
  t4315 = -3.2*t3110*t4312;
  t4364 = -3.2*t3072*t4355;
  t4379 = t3536 + t3719 + t3893 + t4000 + t4124 + t4315 + t4364;
  t6196 = 2.88*t499;
  t6197 = -6.8*t3198*t3688;
  t6202 = -3.2*t3332*t3886;
  t6203 = -3.2*t3243*t3923;
  t6206 = -6.8*t3358*t4081;
  t6213 = -3.2*t3524*t4312;
  t6216 = -3.2*t3406*t4355;
  t6222 = t6196 + t6197 + t6202 + t6203 + t6206 + t6213 + t6216;
  t6447 = 3.2*t5281*t3886;
  t6450 = 3.2*t5262*t3923;
  t6468 = 3.2*t5395*t4312;
  t6469 = 3.2*t5332*t4355;
  t6470 = t3536 + t6444 + t6447 + t6450 + t6467 + t6468 + t6469;
  t6877 = 0.4*t3770*t5227;
  t6896 = -0.4*t1046*t1519;
  t6897 = t1425*t5227;
  t6907 = t1046*t1519;
  t6913 = t6897 + t6907;
  t6916 = 0.8*t6913;
  t6918 = t6877 + t6896 + t6916;
  t6921 = -1.*var4[2]*t6918;
  t6923 = 0.4*t3770*t3198;
  t6925 = -0.4*t5227*t1519;
  t6927 = t1425*t3198;
  t6931 = t5227*t1519;
  t6939 = t6927 + t6931;
  t6946 = 0.8*t6939;
  t6953 = t6923 + t6925 + t6946;
  t6961 = -1.*var4[0]*t6953;
  t6528 = 3.2*t3243*t5623;
  t6554 = 3.2*t3332*t5645;
  t6556 = t6444 + t6527 + t6528 + t6551 + t6554;
  t5624 = 3.2*t2045*t5623;
  t5647 = 3.2*t2843*t5645;
  t5650 = t5457 + t5603 + t5624 + t5625 + t5647;
  t6582 = 3.2*t3243*t5739;
  t6583 = 3.2*t3332*t5743;
  t6584 = t6527 + t6582 + t6551 + t6583;
  t5740 = 3.2*t2045*t5739;
  t5744 = 3.2*t2843*t5743;
  t5745 = t5603 + t5740 + t5625 + t5744;
  t6656 = 3.2*t3406*t5814;
  t6665 = 3.2*t3524*t5871;
  t6673 = t6467 + t6655 + t6656 + t6664 + t6665;
  t5816 = 3.2*t3072*t5814;
  t5877 = 3.2*t3110*t5871;
  t5879 = t5548 + t5794 + t5816 + t5817 + t5877;
  t6751 = 3.2*t3406*t5974;
  t6757 = 3.2*t3524*t5983;
  t6761 = t6655 + t6751 + t6664 + t6757;
  t5976 = 3.2*t3072*t5974;
  t5986 = 3.2*t3110*t5983;
  t5987 = t5794 + t5976 + t5817 + t5986;
  t6095 = 2.88*t92;
  t6096 = 6.8*t1272*t3688;
  t6098 = 3.2*t2843*t3886;
  t6100 = 3.2*t2045*t3923;
  t6101 = 6.8*t2991*t4081;
  t6102 = 3.2*t3110*t4312;
  t6109 = 3.2*t3072*t4355;
  t6112 = t6095 + t6096 + t6098 + t6100 + t6101 + t6102 + t6109;
  t6780 = Power(t3688,2);
  t6788 = Power(t3886,2);
  t6791 = Power(t3923,2);
  t6798 = Power(t4081,2);
  t6800 = Power(t4312,2);
  t6802 = Power(t4355,2);
  t7011 = 0.4*t3198*t1519;
  t4812 = -0.748*t1272;
  t4849 = -3.2*t4848*t2045;
  t4875 = -3.2*t4868*t2843;
  t4884 = t4812 + t4849 + t4875;
  t6275 = -0.748*t3198;
  t6315 = -3.2*t4868*t3332;
  t6322 = -3.2*t4848*t3243;
  t6326 = t6275 + t6315 + t6322;
  t6842 = -0.748*t3688;
  t6865 = -3.2*t4868*t3886;
  t6866 = -3.2*t4848*t3923;
  t6870 = -0.67 + t6842 + t6865 + t6866;
  t6337 = 3.2*t4848*t5262;
  t6348 = 3.2*t4868*t5281;
  t6362 = t6334 + t6337 + t6348;
  t6492 = t6334 + t6483 + t6491;
  t5584 = t4981 + t5582 + t5583;
  t6971 = 3.2*t4848*t5623;
  t6972 = 3.2*t4868*t5645;
  t6978 = t6971 + t6972;
  t7009 = -0.4*t1425*t5227;
  t7012 = -1.*t3198*t1519;
  t7021 = t6897 + t7012;
  t7030 = 0.8*t7021;
  t7041 = t7009 + t7011 + t7030;
  t7042 = -1.*var4[2]*t7041;
  t7045 = -0.4*t1425*t3198;
  t7046 = 0.4*t1272*t1519;
  t7047 = -1.*t1272*t1519;
  t7055 = t6927 + t7047;
  t7056 = 0.8*t7055;
  t7060 = t7045 + t7046 + t7056;
  t7066 = -1.*var4[0]*t7060;
  t6566 = 3.2*t5702*t3332;
  t6567 = 3.2*t5675*t3243;
  t6574 = t6566 + t6483 + t6567 + t6491;
  t5691 = 3.2*t5675*t2045;
  t5703 = 3.2*t5702*t2843;
  t5704 = t5582 + t5691 + t5703 + t5583;
  t7070 = 3.2*t5702*t3886;
  t7072 = 3.2*t5675*t3923;
  t7073 = 3.2*t4848*t5739;
  t7077 = 3.2*t4868*t5743;
  t7083 = t7070 + t7072 + t7073 + t7077;
  t6113 = 0.748*t1272;
  t6114 = 3.2*t4848*t2045;
  t6115 = 3.2*t4868*t2843;
  t6127 = t6113 + t6114 + t6115;
  t7323 = 0.748*t3688;
  t7324 = 3.2*t4868*t3886;
  t7340 = 3.2*t4848*t3923;
  t7354 = 0.67 + t7323 + t7324 + t7340;
  t7540 = Power(t4868,2);
  t7552 = Power(t4848,2);
  t7466 = -0.4*t3770*t1272;
  t7470 = t1425*t1272;
  t7477 = t3198*t1519;
  t7494 = t7470 + t7477;
  t7507 = -0.8*t7494;
  t7511 = t7466 + t7011 + t7507;
  t7515 = -0.4*t3770*t3198;
  t7523 = 0.4*t5227*t1519;
  t7526 = -0.8*t6939;
  t7530 = t7515 + t7523 + t7526;
  t4885 = -0.768*t2045;
  t6327 = -0.768*t3243;
  t6871 = -0.768*t3923;
  t6873 = -0.2 + t6871;
  t7575 = -0.768*t4848;
  t7576 = -0.2 + t7575;
  t7773 = 0.768*t5179*t5598;
  t7774 = 0.768*t5113*t5576;
  t6138 = 0.768*t2045;
  t6775 = 0.768*t3243;
  t7360 = 0.768*t3923;
  t7371 = 0.2 + t7360;
  t7732 = 0.768*t4848;
  t7741 = 0.2 + t7732;
  t7794 = 0.4*t1425*t1272;
  t4381 = -0.748*t2991;
  t4574 = -3.2*t4493*t3072;
  t4721 = -3.2*t4657*t3110;
  t4722 = t4381 + t4574 + t4721;
  t6223 = -0.748*t3358;
  t6228 = -3.2*t4657*t3524;
  t6243 = -3.2*t4493*t3406;
  t6246 = t6223 + t6228 + t6243;
  t6820 = -0.748*t4081;
  t6826 = -3.2*t4657*t4312;
  t6827 = -3.2*t4493*t4355;
  t6828 = -0.67 + t6820 + t6826 + t6827;
  t6406 = 3.2*t4493*t5332;
  t6407 = 3.2*t4657*t5395;
  t6413 = t6399 + t6406 + t6407;
  t6642 = t6399 + t6595 + t6630;
  t5768 = t5090 + t5754 + t5756;
  t7120 = 3.2*t4493*t5814;
  t7121 = 3.2*t4657*t5871;
  t7124 = t7120 + t7121;
  t6694 = 3.2*t5938*t3524;
  t6706 = 3.2*t5931*t3406;
  t6716 = t6694 + t6595 + t6706 + t6630;
  t5932 = 3.2*t5931*t3072;
  t5951 = 3.2*t5938*t3110;
  t5952 = t5754 + t5932 + t5951 + t5756;
  t7155 = 3.2*t5938*t4312;
  t7172 = 3.2*t5931*t4355;
  t7173 = 3.2*t4493*t5974;
  t7179 = 3.2*t4657*t5983;
  t7182 = t7155 + t7172 + t7173 + t7179;
  t6139 = 0.748*t2991;
  t6140 = 3.2*t4493*t3072;
  t6152 = 3.2*t4657*t3110;
  t6158 = t6139 + t6140 + t6152;
  t7379 = 0.748*t4081;
  t7404 = 3.2*t4657*t4312;
  t7406 = 3.2*t4493*t4355;
  t7407 = 0.67 + t7379 + t7404 + t7406;
  t7959 = Power(t4657,2);
  t7994 = Power(t4493,2);
  t4809 = -0.768*t3072;
  t6251 = -0.768*t3406;
  t6829 = -0.768*t4355;
  t6840 = -0.2 + t6829;
  t8006 = -0.768*t4493;
  t8024 = -0.2 + t8006;
  t8228 = 0.768*t5179*t5789;
  t8236 = 0.768*t5113*t5752;
  t6160 = 0.768*t3072;
  t6776 = 0.768*t3406;
  t7442 = 0.768*t4355;
  t7449 = 0.2 + t7442;
  t8191 = 0.768*t4493;
  t8198 = 0.2 + t8191;
  p_output1[0]=-6.8*t1047 + t1307 - 3.2*t2782 - 3.2*t2844 - 6.8*t2917 + t3008 - 3.2*t3074 - 3.2*t3111 + t328 + t679;
  p_output1[1]=t3533;
  p_output1[2]=t4379;
  p_output1[3]=t4722;
  p_output1[4]=t4809;
  p_output1[5]=t4884;
  p_output1[6]=t4885;
  p_output1[7]=0.768*t3243*t4920 + t4975*t5065 + 0.768*t3406*t5073 + t5089*t5109 + t5113*(6.4*t2045*t3243 + 6.4*t2843*t3332 + 6.4*t3072*t3406 + 6.4*t3110*t3524 + t5114 + t5115 + t5133 + t5134) + t5179*t5410 + t5450*t5558;
  p_output1[8]=t5579 + t4975*t5584 + t5113*(t5114 + t5115 + t5590 + t5592) + t5179*t5601 + t5450*t5650;
  p_output1[9]=t5579 + t5113*(t5590 + t5592) + t4975*t5704 + t5179*t5731 + t5450*t5745;
  p_output1[10]=t5753 + t5089*t5768 + t5113*(t5133 + t5134 + t5774 + t5783) + t5179*t5792 + t5450*t5879;
  p_output1[11]=t5753 + t5113*(t5774 + t5783) + t5089*t5952 + t5179*t5960 + t5450*t5987;
  p_output1[12]=6.8*t1047 + 3.2*t2782 + 3.2*t2844 + 6.8*t2917 + 3.2*t3074 + 3.2*t3111 + t5210 + t5290 + t6007 + t6009;
  p_output1[13]=t6093;
  p_output1[14]=t6112;
  p_output1[15]=t6127;
  p_output1[16]=t6138;
  p_output1[17]=t6158;
  p_output1[18]=t6160;
  p_output1[19]=-1.;
  p_output1[20]=t3533;
  p_output1[21]=t1307 + t3008 + t328 - 6.8*t5180 - 3.2*t5273 - 3.2*t5275 - 6.8*t5286 - 3.2*t5343 - 3.2*t5352 + t679;
  p_output1[22]=t6222;
  p_output1[23]=t6246;
  p_output1[24]=t6251;
  p_output1[25]=t6326;
  p_output1[26]=t6327;
  p_output1[27]=0.768*t4920*t5262 + 0.768*t5073*t5332 + t5113*t5410 + t4975*t6362 + t5089*t6413 + t5179*(t5114 + t5133 + 6.4*t3243*t5262 + 6.4*t3332*t5281 + 6.4*t3406*t5332 + 6.4*t3524*t5395 + t6420 + t6425) + t5450*t6470;
  p_output1[28]=t5113*t5601 + t6478 + t4975*t6492 + t5179*(t5114 + t6420 + t6500 + t6503) + t5450*t6556;
  p_output1[29]=t5113*t5731 + t6478 + t5179*(t6500 + t6503) + t4975*t6574 + t5450*t6584;
  p_output1[30]=t5113*t5792 + t6594 + t5089*t6642 + t5179*(t5133 + t6425 + t6644 + t6645) + t5450*t6673;
  p_output1[31]=t5113*t5960 + t6594 + t5179*(t6644 + t6645) + t5089*t6716 + t5450*t6761;
  p_output1[32]=t6093;
  p_output1[33]=t5185 + t5210 + t5274 + t5277 + t5287 + t5290 + t5345 + t5356 + t6007 + t6009;
  p_output1[34]=t5558;
  p_output1[35]=t5065;
  p_output1[36]=t6775;
  p_output1[37]=t5109;
  p_output1[38]=t6776;
  p_output1[39]=-1.;
  p_output1[40]=t4379;
  p_output1[41]=t6222;
  p_output1[42]=-3.3612 - 6.8*t6780 - 3.2*t6788 - 3.2*t6791 - 6.8*t6798 - 3.2*t6800 - 3.2*t6802;
  p_output1[43]=t6828;
  p_output1[44]=t6840;
  p_output1[45]=t6870;
  p_output1[46]=t6873;
  p_output1[47]=t5113*t5558 + t5179*t6470 + t6921 + t6961;
  p_output1[48]=0.768*t4920*t5623 + t5450*(6.4*t3923*t5623 + 6.4*t3886*t5645) + t5113*t5650 + t5179*t6556 + t6921 + t6961 + t4975*t6978;
  p_output1[49]=0.768*t4920*t5739 + t5450*(6.4*t3923*t5739 + 6.4*t3886*t5743) + t5113*t5745 + t5179*t6584 + t7042 + t7066 + t4975*t7083;
  p_output1[50]=0.768*t5073*t5814 + t5450*(6.4*t4355*t5814 + 6.4*t4312*t5871) + t5113*t5879 + t5179*t6673 + t5089*t7124;
  p_output1[51]=0.768*t5073*t5974 + t5450*(6.4*t4355*t5974 + 6.4*t4312*t5983) + t5113*t5987 + t5179*t6761 + t5089*t7182;
  p_output1[52]=t6112;
  p_output1[53]=t5558;
  p_output1[54]=3.3612 + 6.8*t6780 + 3.2*t6788 + 3.2*t6791 + 6.8*t6798 + 3.2*t6800 + 3.2*t6802;
  p_output1[55]=t7354;
  p_output1[56]=t7371;
  p_output1[57]=t7407;
  p_output1[58]=t7449;
  p_output1[59]=t7511;
  p_output1[60]=t7530;
  p_output1[61]=t4884;
  p_output1[62]=t6326;
  p_output1[63]=t6870;
  p_output1[64]=-1.58228 - 3.2*t7540 - 3.2*t7552;
  p_output1[65]=t7576;
  p_output1[66]=t5065*t5113 + t5179*t6362 + t6921 + t6961;
  p_output1[67]=t5113*t5584 + t5179*t6492 + t6921 + t6961 + t5450*t6978;
  p_output1[68]=0.768*t4920*t5675 + t4975*(6.4*t4848*t5675 + 6.4*t4868*t5702) + t5113*t5704 + t5179*t6574 + t7042 + t7066 + t5450*t7083;
  p_output1[69]=t6127;
  p_output1[70]=t5065;
  p_output1[71]=t7354;
  p_output1[72]=1.58228 + 3.2*t7540 + 3.2*t7552;
  p_output1[73]=t7741;
  p_output1[74]=t7511;
  p_output1[75]=t7530;
  p_output1[76]=t4885;
  p_output1[77]=t6327;
  p_output1[78]=t6873;
  p_output1[79]=t7576;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t3243*t5113 + 0.768*t5179*t5262 + t7042 + t7066;
  p_output1[82]=0.768*t5450*t5623 + t7042 + t7066 + t7773 + t7774;
  p_output1[83]=0.768*t4975*t5675 + 0.768*t5450*t5739 + t7773 + t7774 - 1.*(0.4*t1046*t1425 + t7046 + 0.8*(-1.*t1046*t1425 + t7047))*var4[0] - 1.*(t7011 + 0.8*(-1.*t1272*t1425 + t7012) + t7794)*var4[2];
  p_output1[84]=t6138;
  p_output1[85]=t6775;
  p_output1[86]=t7371;
  p_output1[87]=t7741;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t6896 - 0.8*(-1.*t1046*t1519 + t7470) + t7794;
  p_output1[90]=-0.4*t1272*t1519 + 0.4*t1425*t3198 - 0.8*t7055;
  p_output1[91]=t4722;
  p_output1[92]=t6246;
  p_output1[93]=t6828;
  p_output1[94]=-1.58228 - 3.2*t7959 - 3.2*t7994;
  p_output1[95]=t8024;
  p_output1[96]=t5109*t5113 + t5179*t6413;
  p_output1[97]=t5113*t5768 + t5179*t6642 + t5450*t7124;
  p_output1[98]=0.768*t5073*t5931 + t5089*(6.4*t4493*t5931 + 6.4*t4657*t5938) + t5113*t5952 + t5179*t6716 + t5450*t7182;
  p_output1[99]=t6158;
  p_output1[100]=t5109;
  p_output1[101]=t7407;
  p_output1[102]=1.58228 + 3.2*t7959 + 3.2*t7994;
  p_output1[103]=t8198;
  p_output1[104]=t4809;
  p_output1[105]=t6251;
  p_output1[106]=t6840;
  p_output1[107]=t8024;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t3406*t5113 + 0.768*t5179*t5332;
  p_output1[110]=0.768*t5450*t5814 + t8228 + t8236;
  p_output1[111]=0.768*t5089*t5931 + 0.768*t5450*t5974 + t8228 + t8236;
  p_output1[112]=t6160;
  p_output1[113]=t6776;
  p_output1[114]=t7449;
  p_output1[115]=t8198;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
