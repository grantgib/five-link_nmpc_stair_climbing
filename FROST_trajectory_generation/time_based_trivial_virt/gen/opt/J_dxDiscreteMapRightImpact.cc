/*
 * Automatically Generated from Mathematica.
 * Sun 19 Apr 2020 10:59:18 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t1441;
  double t1381;
  double t1454;
  double t1460;
  double t1492;
  double t1501;
  double t1512;
  double t1513;
  double t1517;
  double t1565;
  double t1567;
  double t1596;
  double t1609;
  double t1621;
  double t1622;
  double t1623;
  double t1471;
  double t1483;
  double t1484;
  double t1455;
  double t1463;
  double t1464;
  double t1500;
  double t1506;
  double t1509;
  double t1510;
  double t1524;
  double t1525;
  double t1540;
  double t1543;
  double t1551;
  double t1558;
  double t1559;
  double t1562;
  double t1574;
  double t1575;
  double t1585;
  double t1566;
  double t1570;
  double t1571;
  double t1605;
  double t1615;
  double t1616;
  double t1620;
  double t1628;
  double t1629;
  double t1636;
  double t1637;
  double t1638;
  double t1639;
  double t1640;
  double t1641;
  double t1715;
  double t1716;
  double t1717;
  double t1718;
  double t1719;
  double t1720;
  double t1721;
  double t1722;
  double t1724;
  double t1725;
  double t1726;
  double t1740;
  double t1741;
  double t1742;
  double t1743;
  double t1744;
  double t1747;
  double t1748;
  double t1749;
  double t1751;
  double t1752;
  double t1753;
  double t1658;
  double t1659;
  double t1663;
  double t1645;
  double t1646;
  double t1647;
  double t1768;
  double t1769;
  double t1770;
  double t1674;
  double t1681;
  double t1763;
  double t1764;
  double t1765;
  double t1766;
  double t1698;
  double t1699;
  double t1700;
  double t1689;
  double t1694;
  double t1695;
  double t1780;
  double t1781;
  double t1782;
  double t1702;
  double t1703;
  double t1775;
  double t1776;
  double t1777;
  double t1778;
  double t1487;
  double t1589;
  double t1707;
  double t1708;
  double t1709;
  double t1710;
  double t1711;
  double t1723;
  double t1727;
  double t1728;
  double t1730;
  double t1731;
  double t1732;
  double t1734;
  double t1735;
  double t1736;
  double t1737;
  double t1738;
  double t1750;
  double t1754;
  double t1755;
  double t1757;
  double t1758;
  double t1759;
  double t1786;
  double t1787;
  double t1789;
  double t1790;
  double t1791;
  double t1872;
  double t1873;
  double t1874;
  double t1875;
  double t1876;
  double t1806;
  double t1807;
  double t1808;
  double t1809;
  double t1818;
  double t1819;
  double t1820;
  double t1821;
  double t1822;
  double t1823;
  double t1824;
  double t1825;
  double t1826;
  double t1827;
  double t1828;
  double t1860;
  double t1861;
  double t1863;
  double t1895;
  double t1896;
  double t1897;
  double t1877;
  double t1878;
  double t1879;
  double t1882;
  double t1883;
  double t1886;
  double t1887;
  double t1888;
  double t1889;
  double t1890;
  double t1891;
  double t1894;
  double t1899;
  double t1900;
  double t1904;
  double t1928;
  double t1929;
  double t1906;
  double t1931;
  double t1932;
  double t1908;
  double t1796;
  double t1797;
  double t1799;
  double t1800;
  double t1801;
  double t1943;
  double t1944;
  double t1945;
  double t1946;
  double t1947;
  double t1812;
  double t1813;
  double t1839;
  double t1840;
  double t1841;
  double t1842;
  double t1843;
  double t1844;
  double t1845;
  double t1846;
  double t1847;
  double t1866;
  double t1966;
  double t1967;
  double t1968;
  double t1948;
  double t1949;
  double t1950;
  double t1953;
  double t1954;
  double t1957;
  double t1958;
  double t1959;
  double t1960;
  double t1961;
  double t1962;
  double t1965;
  double t1970;
  double t1971;
  double t1975;
  double t1999;
  double t2001;
  double t1977;
  double t2003;
  double t2004;
  double t1979;
  double t1436;
  double t1443;
  double t1466;
  double t1528;
  double t1563;
  double t1572;
  double t1634;
  double t1642;
  double t1648;
  double t1649;
  double t1670;
  double t1686;
  double t1696;
  double t1697;
  double t1701;
  double t1704;
  double t1705;
  double t1438;
  double t1446;
  double t1489;
  double t1832;
  double t1834;
  double t1595;
  double t1851;
  double t1853;
  double t1829;
  double t1830;
  double t1836;
  double t1837;
  double t1848;
  double t1849;
  double t1855;
  double t1856;
  double t1831;
  double t1833;
  double t1835;
  double t1838;
  double t1850;
  double t1852;
  double t1854;
  double t1857;
  double t1858;
  double t1706;
  double t2077;
  double t2088;
  double t1892;
  double t2097;
  double t1898;
  double t1901;
  double t1902;
  double t1905;
  double t1907;
  double t1909;
  double t2106;
  double t1918;
  double t1919;
  double t1920;
  double t2107;
  double t1914;
  double t1915;
  double t1916;
  double t2108;
  double t2111;
  double t2112;
  double t1926;
  double t2116;
  double t1930;
  double t1933;
  double t1934;
  double t2118;
  double t1936;
  double t1937;
  double t1938;
  double t2083;
  double t2091;
  double t1963;
  double t2100;
  double t1969;
  double t1972;
  double t1973;
  double t1976;
  double t1978;
  double t1980;
  double t2135;
  double t1989;
  double t1990;
  double t1991;
  double t2136;
  double t1985;
  double t1986;
  double t1987;
  double t2137;
  double t2140;
  double t2141;
  double t1997;
  double t2145;
  double t2002;
  double t2005;
  double t2006;
  double t2147;
  double t2008;
  double t2009;
  double t2010;
  double t2024;
  double t2025;
  double t2026;
  double t2027;
  double t2028;
  double t2029;
  double t2030;
  double t2031;
  double t2032;
  double t2015;
  double t2016;
  double t1862;
  double t1864;
  double t1865;
  double t1867;
  double t1868;
  double t1869;
  double t1792;
  double t1793;
  double t1794;
  double t1802;
  double t1803;
  double t1804;
  double t1714;
  double t1729;
  double t1733;
  double t1739;
  double t1756;
  double t1760;
  double t1761;
  double t2058;
  double t2059;
  double t2060;
  double t2061;
  double t2062;
  double t2063;
  double t2064;
  double t2065;
  double t2098;
  double t2099;
  double t2101;
  double t2102;
  double t2103;
  double t2192;
  double t2193;
  double t2194;
  double t2195;
  double t2196;
  double t2197;
  double t2198;
  double t2199;
  double t2200;
  double t2201;
  double t2202;
  double t2203;
  double t2204;
  double t2205;
  double t2206;
  double t2207;
  double t2117;
  double t2119;
  double t2120;
  double t1903;
  double t1910;
  double t1911;
  double t2130;
  double t2131;
  double t2132;
  double t1935;
  double t1939;
  double t1940;
  double t2146;
  double t2148;
  double t2149;
  double t1974;
  double t1981;
  double t1982;
  double t2159;
  double t2160;
  double t2161;
  double t2007;
  double t2011;
  double t2012;
  double t2033;
  double t2034;
  double t2035;
  double t2036;
  double t2037;
  double t2038;
  double t2039;
  double t2040;
  double t2167;
  double t2169;
  double t2171;
  double t2173;
  double t2175;
  double t2177;
  double t2225;
  double t1762;
  double t1767;
  double t1771;
  double t1772;
  double t2066;
  double t2067;
  double t2068;
  double t2069;
  double t2180;
  double t2181;
  double t2182;
  double t2183;
  double t2078;
  double t2079;
  double t2080;
  double t2109;
  double t1880;
  double t2212;
  double t2213;
  double t2214;
  double t2224;
  double t2226;
  double t2227;
  double t2228;
  double t2229;
  double t2230;
  double t2231;
  double t2232;
  double t2233;
  double t2234;
  double t2235;
  double t2236;
  double t2237;
  double t2123;
  double t2124;
  double t2125;
  double t1917;
  double t1921;
  double t1922;
  double t2238;
  double t2239;
  double t2240;
  double t2241;
  double t2242;
  double t2041;
  double t2042;
  double t2043;
  double t2044;
  double t2284;
  double t2285;
  double t2286;
  double t2287;
  double t2306;
  double t2308;
  double t2296;
  double t2297;
  double t2298;
  double t2299;
  double t2300;
  double t2301;
  double t2302;
  double t2303;
  double t2304;
  double t2305;
  double t1773;
  double t2070;
  double t2184;
  double t2185;
  double t2311;
  double t2312;
  double t2338;
  double t2339;
  double t2045;
  double t2165;
  double t2288;
  double t2289;
  double t2332;
  double t2333;
  double t2343;
  double t1774;
  double t1779;
  double t1783;
  double t1784;
  double t2071;
  double t2072;
  double t2073;
  double t2074;
  double t2186;
  double t2187;
  double t2188;
  double t2189;
  double t2084;
  double t2085;
  double t2086;
  double t2138;
  double t1951;
  double t2252;
  double t2253;
  double t2254;
  double t2152;
  double t2153;
  double t2154;
  double t1988;
  double t1992;
  double t1993;
  double t2264;
  double t2265;
  double t2266;
  double t2267;
  double t2268;
  double t2046;
  double t2047;
  double t2048;
  double t2049;
  double t2290;
  double t2291;
  double t2292;
  double t2293;
  double t2364;
  double t2366;
  double t1785;
  double t2075;
  double t2190;
  double t2191;
  double t2369;
  double t2370;
  double t2396;
  double t2397;
  double t2050;
  double t2166;
  double t2294;
  double t2295;
  double t2390;
  double t2391;
  t1441 = Sin(var2[2]);
  t1381 = Cos(var2[2]);
  t1454 = Cos(var2[3]);
  t1460 = Sin(var2[3]);
  t1492 = Cos(var2[4]);
  t1501 = Sin(var2[4]);
  t1512 = t1454*t1492;
  t1513 = -1.*t1460*t1501;
  t1517 = t1512 + t1513;
  t1565 = Cos(var2[5]);
  t1567 = Sin(var2[5]);
  t1596 = Cos(var2[6]);
  t1609 = Sin(var2[6]);
  t1621 = t1565*t1596;
  t1622 = -1.*t1567*t1609;
  t1623 = t1621 + t1622;
  t1471 = t1381*t1454;
  t1483 = -1.*t1441*t1460;
  t1484 = t1471 + t1483;
  t1455 = t1454*t1441;
  t1463 = t1381*t1460;
  t1464 = t1455 + t1463;
  t1500 = -1.*t1492*t1460;
  t1506 = -1.*t1454*t1501;
  t1509 = t1500 + t1506;
  t1510 = t1441*t1509;
  t1524 = t1381*t1517;
  t1525 = t1510 + t1524;
  t1540 = t1492*t1460;
  t1543 = t1454*t1501;
  t1551 = t1540 + t1543;
  t1558 = t1381*t1551;
  t1559 = t1441*t1517;
  t1562 = t1558 + t1559;
  t1574 = t1381*t1565;
  t1575 = -1.*t1441*t1567;
  t1585 = t1574 + t1575;
  t1566 = t1565*t1441;
  t1570 = t1381*t1567;
  t1571 = t1566 + t1570;
  t1605 = -1.*t1596*t1567;
  t1615 = -1.*t1565*t1609;
  t1616 = t1605 + t1615;
  t1620 = t1441*t1616;
  t1628 = t1381*t1623;
  t1629 = t1620 + t1628;
  t1636 = t1596*t1567;
  t1637 = t1565*t1609;
  t1638 = t1636 + t1637;
  t1639 = t1381*t1638;
  t1640 = t1441*t1623;
  t1641 = t1639 + t1640;
  t1715 = -1.*t1492;
  t1716 = 1. + t1715;
  t1717 = 0.4*t1716;
  t1718 = 0.64*t1492;
  t1719 = t1717 + t1718;
  t1720 = t1719*t1460;
  t1721 = 0.24*t1454*t1501;
  t1722 = t1720 + t1721;
  t1724 = t1454*t1719;
  t1725 = -0.24*t1460*t1501;
  t1726 = t1724 + t1725;
  t1740 = -1.*t1596;
  t1741 = 1. + t1740;
  t1742 = 0.4*t1741;
  t1743 = 0.64*t1596;
  t1744 = t1742 + t1743;
  t1747 = t1744*t1567;
  t1748 = 0.24*t1565*t1609;
  t1749 = t1747 + t1748;
  t1751 = t1565*t1744;
  t1752 = -0.24*t1567*t1609;
  t1753 = t1751 + t1752;
  t1658 = t1381*t1509;
  t1659 = -1.*t1441*t1517;
  t1663 = t1658 + t1659;
  t1645 = -1.*t1454*t1441;
  t1646 = -1.*t1381*t1460;
  t1647 = t1645 + t1646;
  t1768 = t1719*t1501;
  t1769 = -0.24*t1492*t1501;
  t1770 = t1768 + t1769;
  t1674 = -1.*t1441*t1551;
  t1681 = t1674 + t1524;
  t1763 = t1719*t1492;
  t1764 = Power(t1501,2);
  t1765 = 0.24*t1764;
  t1766 = t1763 + t1765;
  t1698 = t1381*t1616;
  t1699 = -1.*t1441*t1623;
  t1700 = t1698 + t1699;
  t1689 = -1.*t1565*t1441;
  t1694 = -1.*t1381*t1567;
  t1695 = t1689 + t1694;
  t1780 = t1744*t1609;
  t1781 = -0.24*t1596*t1609;
  t1782 = t1780 + t1781;
  t1702 = -1.*t1441*t1638;
  t1703 = t1702 + t1628;
  t1775 = t1744*t1596;
  t1776 = Power(t1609,2);
  t1777 = 0.24*t1776;
  t1778 = t1775 + t1777;
  t1487 = Power(t1484,2);
  t1589 = Power(t1585,2);
  t1707 = Power(t1454,2);
  t1708 = 0.11*t1707;
  t1709 = Power(t1460,2);
  t1710 = 0.11*t1709;
  t1711 = t1708 + t1710;
  t1723 = -1.*t1722*t1517;
  t1727 = -1.*t1509*t1726;
  t1728 = t1723 + t1727;
  t1730 = t1722*t1551;
  t1731 = t1517*t1726;
  t1732 = t1730 + t1731;
  t1734 = Power(t1565,2);
  t1735 = 0.11*t1734;
  t1736 = Power(t1567,2);
  t1737 = 0.11*t1736;
  t1738 = t1735 + t1737;
  t1750 = -1.*t1749*t1623;
  t1754 = -1.*t1616*t1753;
  t1755 = t1750 + t1754;
  t1757 = t1749*t1638;
  t1758 = t1623*t1753;
  t1759 = t1757 + t1758;
  t1786 = -1.*var1[4];
  t1787 = var3[4] + t1786;
  t1789 = -1.*var1[3];
  t1790 = var3[3] + t1789;
  t1791 = 0.748*t1647;
  t1872 = -1.*t1454*t1492;
  t1873 = t1460*t1501;
  t1874 = t1872 + t1873;
  t1875 = t1441*t1874;
  t1876 = t1658 + t1875;
  t1806 = -1.*var1[0];
  t1807 = var3[0] + t1806;
  t1808 = 13.6*t1647*t1484;
  t1809 = 13.6*t1464*t1484;
  t1818 = -1.*var1[1];
  t1819 = var3[1] + t1818;
  t1820 = Power(t1647,2);
  t1821 = 6.8*t1820;
  t1822 = 6.8*t1647*t1464;
  t1823 = 6.8*t1487;
  t1824 = -1.*t1381*t1454;
  t1825 = t1441*t1460;
  t1826 = t1824 + t1825;
  t1827 = 6.8*t1484*t1826;
  t1828 = -1.*t1441*t1509;
  t1860 = -1.*var1[2];
  t1861 = var3[2] + t1860;
  t1863 = 6.8*t1647*t1711;
  t1895 = -1.*t1719*t1460;
  t1896 = -0.24*t1454*t1501;
  t1897 = t1895 + t1896;
  t1877 = 0.768*t1787*t1876;
  t1878 = 3.2*t1770*t1525;
  t1879 = 3.2*t1766*t1876;
  t1882 = 6.4*t1525*t1562;
  t1883 = 6.4*t1525*t1876;
  t1886 = 3.2*t1525*t1681;
  t1887 = 3.2*t1663*t1562;
  t1888 = t1381*t1874;
  t1889 = t1828 + t1888;
  t1890 = 3.2*t1525*t1889;
  t1891 = 3.2*t1663*t1876;
  t1894 = 3.2*t1525*t1728;
  t1899 = t1722*t1517;
  t1900 = t1509*t1726;
  t1904 = 3.2*t1732*t1876;
  t1928 = -0.24*t1492*t1460;
  t1929 = t1928 + t1896;
  t1906 = -1.*t1509*t1722;
  t1931 = 0.24*t1454*t1492;
  t1932 = t1931 + t1725;
  t1908 = -1.*t1726*t1874;
  t1796 = -1.*var1[6];
  t1797 = var3[6] + t1796;
  t1799 = -1.*var1[5];
  t1800 = var3[5] + t1799;
  t1801 = 0.748*t1695;
  t1943 = -1.*t1565*t1596;
  t1944 = t1567*t1609;
  t1945 = t1943 + t1944;
  t1946 = t1441*t1945;
  t1947 = t1698 + t1946;
  t1812 = 13.6*t1695*t1585;
  t1813 = 13.6*t1571*t1585;
  t1839 = Power(t1695,2);
  t1840 = 6.8*t1839;
  t1841 = 6.8*t1695*t1571;
  t1842 = 6.8*t1589;
  t1843 = -1.*t1381*t1565;
  t1844 = t1441*t1567;
  t1845 = t1843 + t1844;
  t1846 = 6.8*t1585*t1845;
  t1847 = -1.*t1441*t1616;
  t1866 = 6.8*t1695*t1738;
  t1966 = -1.*t1744*t1567;
  t1967 = -0.24*t1565*t1609;
  t1968 = t1966 + t1967;
  t1948 = 0.768*t1797*t1947;
  t1949 = 3.2*t1782*t1629;
  t1950 = 3.2*t1778*t1947;
  t1953 = 6.4*t1629*t1641;
  t1954 = 6.4*t1629*t1947;
  t1957 = 3.2*t1629*t1703;
  t1958 = 3.2*t1700*t1641;
  t1959 = t1381*t1945;
  t1960 = t1847 + t1959;
  t1961 = 3.2*t1629*t1960;
  t1962 = 3.2*t1700*t1947;
  t1965 = 3.2*t1629*t1755;
  t1970 = t1749*t1623;
  t1971 = t1616*t1753;
  t1975 = 3.2*t1759*t1947;
  t1999 = -0.24*t1596*t1567;
  t2001 = t1999 + t1967;
  t1977 = -1.*t1616*t1749;
  t2003 = 0.24*t1565*t1596;
  t2004 = t2003 + t1752;
  t1979 = -1.*t1753*t1945;
  t1436 = Power(t1381,2);
  t1443 = Power(t1441,2);
  t1466 = Power(t1464,2);
  t1528 = Power(t1525,2);
  t1563 = Power(t1562,2);
  t1572 = Power(t1571,2);
  t1634 = Power(t1629,2);
  t1642 = Power(t1641,2);
  t1648 = -6.8*t1647*t1484;
  t1649 = -6.8*t1464*t1484;
  t1670 = -3.2*t1525*t1663;
  t1686 = -3.2*t1681*t1562;
  t1696 = -6.8*t1695*t1585;
  t1697 = -6.8*t1571*t1585;
  t1701 = -3.2*t1629*t1700;
  t1704 = -3.2*t1703*t1641;
  t1705 = t1648 + t1649 + t1670 + t1686 + t1696 + t1697 + t1701 + t1704;
  t1438 = -12.*t1436;
  t1446 = -12.*t1443;
  t1489 = -6.8*t1487;
  t1832 = Power(t1681,2);
  t1834 = Power(t1663,2);
  t1595 = -6.8*t1589;
  t1851 = Power(t1703,2);
  t1853 = Power(t1700,2);
  t1829 = -1.*t1381*t1517;
  t1830 = t1828 + t1829;
  t1836 = -1.*t1381*t1551;
  t1837 = t1836 + t1659;
  t1848 = -1.*t1381*t1623;
  t1849 = t1847 + t1848;
  t1855 = -1.*t1381*t1638;
  t1856 = t1855 + t1699;
  t1831 = 3.2*t1830*t1525;
  t1833 = 3.2*t1832;
  t1835 = 3.2*t1834;
  t1838 = 3.2*t1837*t1562;
  t1850 = 3.2*t1849*t1629;
  t1852 = 3.2*t1851;
  t1854 = 3.2*t1853;
  t1857 = 3.2*t1856*t1641;
  t1858 = t1821 + t1822 + t1823 + t1827 + t1831 + t1833 + t1835 + t1838 + t1840 + t1841 + t1842 + t1846 + t1850 + t1852 + t1854 + t1857;
  t1706 = -2.88*t1381;
  t2077 = 0.748*t1826;
  t2088 = 13.6*t1647*t1826;
  t1892 = t1821 + t1822 + t1823 + t1827 + t1886 + t1887 + t1890 + t1891;
  t2097 = 6.8*t1826*t1711;
  t1898 = t1897*t1517;
  t1901 = t1551*t1726;
  t1902 = t1898 + t1899 + t1900 + t1901;
  t1905 = -1.*t1509*t1897;
  t1907 = -1.*t1517*t1726;
  t1909 = t1905 + t1906 + t1907 + t1908;
  t2106 = 0.768*t1787*t1889;
  t1918 = Power(t1492,2);
  t1919 = -0.24*t1918;
  t1920 = t1763 + t1919;
  t2107 = 3.2*t1770*t1663;
  t1914 = -1.*t1719*t1501;
  t1915 = 0.24*t1492*t1501;
  t1916 = t1914 + t1915;
  t2108 = 3.2*t1766*t1889;
  t2111 = 6.4*t1681*t1663;
  t2112 = 6.4*t1663*t1889;
  t1926 = t1886 + t1887 + t1890 + t1891;
  t2116 = 3.2*t1663*t1728;
  t1930 = t1929*t1517;
  t1933 = t1551*t1932;
  t1934 = t1930 + t1899 + t1900 + t1933;
  t2118 = 3.2*t1732*t1889;
  t1936 = -1.*t1509*t1929;
  t1937 = -1.*t1517*t1932;
  t1938 = t1936 + t1906 + t1937 + t1908;
  t2083 = 0.748*t1845;
  t2091 = 13.6*t1695*t1845;
  t1963 = t1840 + t1841 + t1842 + t1846 + t1957 + t1958 + t1961 + t1962;
  t2100 = 6.8*t1845*t1738;
  t1969 = t1968*t1623;
  t1972 = t1638*t1753;
  t1973 = t1969 + t1970 + t1971 + t1972;
  t1976 = -1.*t1616*t1968;
  t1978 = -1.*t1623*t1753;
  t1980 = t1976 + t1977 + t1978 + t1979;
  t2135 = 0.768*t1797*t1960;
  t1989 = Power(t1596,2);
  t1990 = -0.24*t1989;
  t1991 = t1775 + t1990;
  t2136 = 3.2*t1782*t1700;
  t1985 = -1.*t1744*t1609;
  t1986 = 0.24*t1596*t1609;
  t1987 = t1985 + t1986;
  t2137 = 3.2*t1778*t1960;
  t2140 = 6.4*t1703*t1700;
  t2141 = 6.4*t1700*t1960;
  t1997 = t1957 + t1958 + t1961 + t1962;
  t2145 = 3.2*t1700*t1755;
  t2002 = t2001*t1623;
  t2005 = t1638*t2004;
  t2006 = t2002 + t1970 + t1971 + t2005;
  t2147 = 3.2*t1759*t1960;
  t2008 = -1.*t1616*t2001;
  t2009 = -1.*t1623*t2004;
  t2010 = t2008 + t1977 + t2009 + t1979;
  t2024 = 6.8*t1647*t1484;
  t2025 = 6.8*t1464*t1484;
  t2026 = 3.2*t1525*t1663;
  t2027 = 3.2*t1681*t1562;
  t2028 = 6.8*t1695*t1585;
  t2029 = 6.8*t1571*t1585;
  t2030 = 3.2*t1629*t1700;
  t2031 = 3.2*t1703*t1641;
  t2032 = t2024 + t2025 + t2026 + t2027 + t2028 + t2029 + t2030 + t2031;
  t2015 = 12.*t1436;
  t2016 = 12.*t1443;
  t1862 = -2.88*t1441;
  t1864 = 3.2*t1681*t1728;
  t1865 = 3.2*t1663*t1732;
  t1867 = 3.2*t1703*t1755;
  t1868 = 3.2*t1700*t1759;
  t1869 = t1862 + t1863 + t1864 + t1865 + t1866 + t1867 + t1868;
  t1792 = 3.2*t1770*t1681;
  t1793 = 3.2*t1766*t1663;
  t1794 = t1791 + t1792 + t1793;
  t1802 = 3.2*t1782*t1703;
  t1803 = 3.2*t1778*t1700;
  t1804 = t1801 + t1802 + t1803;
  t1714 = -6.8*t1484*t1711;
  t1729 = -3.2*t1562*t1728;
  t1733 = -3.2*t1525*t1732;
  t1739 = -6.8*t1585*t1738;
  t1756 = -3.2*t1641*t1755;
  t1760 = -3.2*t1629*t1759;
  t1761 = t1706 + t1714 + t1729 + t1733 + t1739 + t1756 + t1760;
  t2058 = 2.88*t1441;
  t2059 = -6.8*t1647*t1711;
  t2060 = -3.2*t1681*t1728;
  t2061 = -3.2*t1663*t1732;
  t2062 = -6.8*t1695*t1738;
  t2063 = -3.2*t1703*t1755;
  t2064 = -3.2*t1700*t1759;
  t2065 = t2058 + t2059 + t2060 + t2061 + t2062 + t2063 + t2064;
  t2098 = 3.2*t1837*t1728;
  t2099 = 3.2*t1830*t1732;
  t2101 = 3.2*t1856*t1755;
  t2102 = 3.2*t1849*t1759;
  t2103 = t1706 + t2097 + t2098 + t2099 + t2100 + t2101 + t2102;
  t2192 = 0.4*t1716*t1826;
  t2193 = -0.4*t1464*t1501;
  t2194 = t1492*t1826;
  t2195 = t1464*t1501;
  t2196 = t2194 + t2195;
  t2197 = 0.8*t2196;
  t2198 = t2192 + t2193 + t2197;
  t2199 = -1.*var4[2]*t2198;
  t2200 = 0.4*t1716*t1647;
  t2201 = -0.4*t1826*t1501;
  t2202 = t1492*t1647;
  t2203 = t1826*t1501;
  t2204 = t2202 + t2203;
  t2205 = 0.8*t2204;
  t2206 = t2200 + t2201 + t2205;
  t2207 = -1.*var4[0]*t2206;
  t2117 = 3.2*t1663*t1902;
  t2119 = 3.2*t1681*t1909;
  t2120 = t2097 + t2116 + t2117 + t2118 + t2119;
  t1903 = 3.2*t1525*t1902;
  t1910 = 3.2*t1562*t1909;
  t1911 = t1863 + t1894 + t1903 + t1904 + t1910;
  t2130 = 3.2*t1663*t1934;
  t2131 = 3.2*t1681*t1938;
  t2132 = t2116 + t2130 + t2118 + t2131;
  t1935 = 3.2*t1525*t1934;
  t1939 = 3.2*t1562*t1938;
  t1940 = t1894 + t1935 + t1904 + t1939;
  t2146 = 3.2*t1700*t1973;
  t2148 = 3.2*t1703*t1980;
  t2149 = t2100 + t2145 + t2146 + t2147 + t2148;
  t1974 = 3.2*t1629*t1973;
  t1981 = 3.2*t1641*t1980;
  t1982 = t1866 + t1965 + t1974 + t1975 + t1981;
  t2159 = 3.2*t1700*t2006;
  t2160 = 3.2*t1703*t2010;
  t2161 = t2145 + t2159 + t2147 + t2160;
  t2007 = 3.2*t1629*t2006;
  t2011 = 3.2*t1641*t2010;
  t2012 = t1965 + t2007 + t1975 + t2011;
  t2033 = 2.88*t1381;
  t2034 = 6.8*t1484*t1711;
  t2035 = 3.2*t1562*t1728;
  t2036 = 3.2*t1525*t1732;
  t2037 = 6.8*t1585*t1738;
  t2038 = 3.2*t1641*t1755;
  t2039 = 3.2*t1629*t1759;
  t2040 = t2033 + t2034 + t2035 + t2036 + t2037 + t2038 + t2039;
  t2167 = Power(t1711,2);
  t2169 = Power(t1728,2);
  t2171 = Power(t1732,2);
  t2173 = Power(t1738,2);
  t2175 = Power(t1755,2);
  t2177 = Power(t1759,2);
  t2225 = 0.4*t1647*t1501;
  t1762 = -0.748*t1484;
  t1767 = -3.2*t1766*t1525;
  t1771 = -3.2*t1770*t1562;
  t1772 = t1762 + t1767 + t1771;
  t2066 = -0.748*t1647;
  t2067 = -3.2*t1770*t1681;
  t2068 = -3.2*t1766*t1663;
  t2069 = t2066 + t2067 + t2068;
  t2180 = -0.748*t1711;
  t2181 = -3.2*t1770*t1728;
  t2182 = -3.2*t1766*t1732;
  t2183 = -0.67 + t2180 + t2181 + t2182;
  t2078 = 3.2*t1766*t1830;
  t2079 = 3.2*t1770*t1837;
  t2080 = t2077 + t2078 + t2079;
  t2109 = t2077 + t2107 + t2108;
  t1880 = t1791 + t1878 + t1879;
  t2212 = 3.2*t1766*t1902;
  t2213 = 3.2*t1770*t1909;
  t2214 = t2212 + t2213;
  t2224 = -0.4*t1492*t1826;
  t2226 = -1.*t1647*t1501;
  t2227 = t2194 + t2226;
  t2228 = 0.8*t2227;
  t2229 = t2224 + t2225 + t2228;
  t2230 = -1.*var4[2]*t2229;
  t2231 = -0.4*t1492*t1647;
  t2232 = 0.4*t1484*t1501;
  t2233 = -1.*t1484*t1501;
  t2234 = t2202 + t2233;
  t2235 = 0.8*t2234;
  t2236 = t2231 + t2232 + t2235;
  t2237 = -1.*var4[0]*t2236;
  t2123 = 3.2*t1920*t1681;
  t2124 = 3.2*t1916*t1663;
  t2125 = t2123 + t2107 + t2124 + t2108;
  t1917 = 3.2*t1916*t1525;
  t1921 = 3.2*t1920*t1562;
  t1922 = t1878 + t1917 + t1921 + t1879;
  t2238 = 3.2*t1920*t1728;
  t2239 = 3.2*t1916*t1732;
  t2240 = 3.2*t1766*t1934;
  t2241 = 3.2*t1770*t1938;
  t2242 = t2238 + t2239 + t2240 + t2241;
  t2041 = 0.748*t1484;
  t2042 = 3.2*t1766*t1525;
  t2043 = 3.2*t1770*t1562;
  t2044 = t2041 + t2042 + t2043;
  t2284 = 0.748*t1711;
  t2285 = 3.2*t1770*t1728;
  t2286 = 3.2*t1766*t1732;
  t2287 = 0.67 + t2284 + t2285 + t2286;
  t2306 = Power(t1770,2);
  t2308 = Power(t1766,2);
  t2296 = -0.4*t1716*t1484;
  t2297 = t1492*t1484;
  t2298 = t1647*t1501;
  t2299 = t2297 + t2298;
  t2300 = -0.8*t2299;
  t2301 = t2296 + t2225 + t2300;
  t2302 = -0.4*t1716*t1647;
  t2303 = 0.4*t1826*t1501;
  t2304 = -0.8*t2204;
  t2305 = t2302 + t2303 + t2304;
  t1773 = -0.768*t1525;
  t2070 = -0.768*t1663;
  t2184 = -0.768*t1732;
  t2185 = -0.2 + t2184;
  t2311 = -0.768*t1766;
  t2312 = -0.2 + t2311;
  t2338 = 0.768*t1819*t1889;
  t2339 = 0.768*t1807*t1876;
  t2045 = 0.768*t1525;
  t2165 = 0.768*t1663;
  t2288 = 0.768*t1732;
  t2289 = 0.2 + t2288;
  t2332 = 0.768*t1766;
  t2333 = 0.2 + t2332;
  t2343 = 0.4*t1492*t1484;
  t1774 = -0.748*t1585;
  t1779 = -3.2*t1778*t1629;
  t1783 = -3.2*t1782*t1641;
  t1784 = t1774 + t1779 + t1783;
  t2071 = -0.748*t1695;
  t2072 = -3.2*t1782*t1703;
  t2073 = -3.2*t1778*t1700;
  t2074 = t2071 + t2072 + t2073;
  t2186 = -0.748*t1738;
  t2187 = -3.2*t1782*t1755;
  t2188 = -3.2*t1778*t1759;
  t2189 = -0.67 + t2186 + t2187 + t2188;
  t2084 = 3.2*t1778*t1849;
  t2085 = 3.2*t1782*t1856;
  t2086 = t2083 + t2084 + t2085;
  t2138 = t2083 + t2136 + t2137;
  t1951 = t1801 + t1949 + t1950;
  t2252 = 3.2*t1778*t1973;
  t2253 = 3.2*t1782*t1980;
  t2254 = t2252 + t2253;
  t2152 = 3.2*t1991*t1703;
  t2153 = 3.2*t1987*t1700;
  t2154 = t2152 + t2136 + t2153 + t2137;
  t1988 = 3.2*t1987*t1629;
  t1992 = 3.2*t1991*t1641;
  t1993 = t1949 + t1988 + t1992 + t1950;
  t2264 = 3.2*t1991*t1755;
  t2265 = 3.2*t1987*t1759;
  t2266 = 3.2*t1778*t2006;
  t2267 = 3.2*t1782*t2010;
  t2268 = t2264 + t2265 + t2266 + t2267;
  t2046 = 0.748*t1585;
  t2047 = 3.2*t1778*t1629;
  t2048 = 3.2*t1782*t1641;
  t2049 = t2046 + t2047 + t2048;
  t2290 = 0.748*t1738;
  t2291 = 3.2*t1782*t1755;
  t2292 = 3.2*t1778*t1759;
  t2293 = 0.67 + t2290 + t2291 + t2292;
  t2364 = Power(t1782,2);
  t2366 = Power(t1778,2);
  t1785 = -0.768*t1629;
  t2075 = -0.768*t1700;
  t2190 = -0.768*t1759;
  t2191 = -0.2 + t2190;
  t2369 = -0.768*t1778;
  t2370 = -0.2 + t2369;
  t2396 = 0.768*t1819*t1960;
  t2397 = 0.768*t1807*t1947;
  t2050 = 0.768*t1629;
  t2166 = 0.768*t1700;
  t2294 = 0.768*t1759;
  t2295 = 0.2 + t2294;
  t2390 = 0.768*t1778;
  t2391 = 0.2 + t2390;
  p_output1[0]=t1438 + t1446 - 6.8*t1466 + t1489 - 3.2*t1528 - 3.2*t1563 - 6.8*t1572 + t1595 - 3.2*t1634 - 3.2*t1642;
  p_output1[1]=t1705;
  p_output1[2]=t1761;
  p_output1[3]=t1772;
  p_output1[4]=t1773;
  p_output1[5]=t1784;
  p_output1[6]=t1785;
  p_output1[7]=0.768*t1663*t1787 + t1790*t1794 + 0.768*t1700*t1797 + t1800*t1804 + t1807*(6.4*t1525*t1663 + 6.4*t1562*t1681 + 6.4*t1629*t1700 + 6.4*t1641*t1703 + t1808 + t1809 + t1812 + t1813) + t1819*t1858 + t1861*t1869;
  p_output1[8]=t1877 + t1790*t1880 + t1807*(t1808 + t1809 + t1882 + t1883) + t1819*t1892 + t1861*t1911;
  p_output1[9]=t1877 + t1807*(t1882 + t1883) + t1790*t1922 + t1819*t1926 + t1861*t1940;
  p_output1[10]=t1948 + t1800*t1951 + t1807*(t1812 + t1813 + t1953 + t1954) + t1819*t1963 + t1861*t1982;
  p_output1[11]=t1948 + t1807*(t1953 + t1954) + t1800*t1993 + t1819*t1997 + t1861*t2012;
  p_output1[12]=6.8*t1466 + 3.2*t1528 + 3.2*t1563 + 6.8*t1572 + 3.2*t1634 + 3.2*t1642 + t1823 + t1842 + t2015 + t2016;
  p_output1[13]=t2032;
  p_output1[14]=t2040;
  p_output1[15]=t2044;
  p_output1[16]=t2045;
  p_output1[17]=t2049;
  p_output1[18]=t2050;
  p_output1[19]=-1.;
  p_output1[20]=t1705;
  p_output1[21]=t1438 + t1446 + t1489 + t1595 - 6.8*t1820 - 3.2*t1832 - 3.2*t1834 - 6.8*t1839 - 3.2*t1851 - 3.2*t1853;
  p_output1[22]=t2065;
  p_output1[23]=t2069;
  p_output1[24]=t2070;
  p_output1[25]=t2074;
  p_output1[26]=t2075;
  p_output1[27]=0.768*t1787*t1830 + 0.768*t1797*t1849 + t1807*t1858 + t1790*t2080 + t1800*t2086 + t1819*(t1808 + t1812 + 6.4*t1663*t1830 + 6.4*t1681*t1837 + 6.4*t1700*t1849 + 6.4*t1703*t1856 + t2088 + t2091) + t1861*t2103;
  p_output1[28]=t1807*t1892 + t2106 + t1790*t2109 + t1819*(t1808 + t2088 + t2111 + t2112) + t1861*t2120;
  p_output1[29]=t1807*t1926 + t2106 + t1819*(t2111 + t2112) + t1790*t2125 + t1861*t2132;
  p_output1[30]=t1807*t1963 + t2135 + t1800*t2138 + t1819*(t1812 + t2091 + t2140 + t2141) + t1861*t2149;
  p_output1[31]=t1807*t1997 + t2135 + t1819*(t2140 + t2141) + t1800*t2154 + t1861*t2161;
  p_output1[32]=t2032;
  p_output1[33]=t1821 + t1823 + t1833 + t1835 + t1840 + t1842 + t1852 + t1854 + t2015 + t2016;
  p_output1[34]=t1869;
  p_output1[35]=t1794;
  p_output1[36]=t2165;
  p_output1[37]=t1804;
  p_output1[38]=t2166;
  p_output1[39]=-1.;
  p_output1[40]=t1761;
  p_output1[41]=t2065;
  p_output1[42]=-3.3612 - 6.8*t2167 - 3.2*t2169 - 3.2*t2171 - 6.8*t2173 - 3.2*t2175 - 3.2*t2177;
  p_output1[43]=t2183;
  p_output1[44]=t2185;
  p_output1[45]=t2189;
  p_output1[46]=t2191;
  p_output1[47]=t1807*t1869 + t1819*t2103 + t2199 + t2207;
  p_output1[48]=0.768*t1787*t1902 + t1861*(6.4*t1732*t1902 + 6.4*t1728*t1909) + t1807*t1911 + t1819*t2120 + t2199 + t2207 + t1790*t2214;
  p_output1[49]=0.768*t1787*t1934 + t1861*(6.4*t1732*t1934 + 6.4*t1728*t1938) + t1807*t1940 + t1819*t2132 + t2230 + t2237 + t1790*t2242;
  p_output1[50]=0.768*t1797*t1973 + t1861*(6.4*t1759*t1973 + 6.4*t1755*t1980) + t1807*t1982 + t1819*t2149 + t1800*t2254;
  p_output1[51]=0.768*t1797*t2006 + t1861*(6.4*t1759*t2006 + 6.4*t1755*t2010) + t1807*t2012 + t1819*t2161 + t1800*t2268;
  p_output1[52]=t2040;
  p_output1[53]=t1869;
  p_output1[54]=3.3612 + 6.8*t2167 + 3.2*t2169 + 3.2*t2171 + 6.8*t2173 + 3.2*t2175 + 3.2*t2177;
  p_output1[55]=t2287;
  p_output1[56]=t2289;
  p_output1[57]=t2293;
  p_output1[58]=t2295;
  p_output1[59]=t2301;
  p_output1[60]=t2305;
  p_output1[61]=t1772;
  p_output1[62]=t2069;
  p_output1[63]=t2183;
  p_output1[64]=-1.58228 - 3.2*t2306 - 3.2*t2308;
  p_output1[65]=t2312;
  p_output1[66]=t1794*t1807 + t1819*t2080 + t2199 + t2207;
  p_output1[67]=t1807*t1880 + t1819*t2109 + t2199 + t2207 + t1861*t2214;
  p_output1[68]=0.768*t1787*t1916 + t1790*(6.4*t1766*t1916 + 6.4*t1770*t1920) + t1807*t1922 + t1819*t2125 + t2230 + t2237 + t1861*t2242;
  p_output1[69]=t2044;
  p_output1[70]=t1794;
  p_output1[71]=t2287;
  p_output1[72]=1.58228 + 3.2*t2306 + 3.2*t2308;
  p_output1[73]=t2333;
  p_output1[74]=t2301;
  p_output1[75]=t2305;
  p_output1[76]=t1773;
  p_output1[77]=t2070;
  p_output1[78]=t2185;
  p_output1[79]=t2312;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t1663*t1807 + 0.768*t1819*t1830 + t2230 + t2237;
  p_output1[82]=0.768*t1861*t1902 + t2230 + t2237 + t2338 + t2339;
  p_output1[83]=0.768*t1790*t1916 + 0.768*t1861*t1934 + t2338 + t2339 - 1.*(0.4*t1464*t1492 + t2232 + 0.8*(-1.*t1464*t1492 + t2233))*var4[0] - 1.*(t2225 + 0.8*(-1.*t1484*t1492 + t2226) + t2343)*var4[2];
  p_output1[84]=t2045;
  p_output1[85]=t2165;
  p_output1[86]=t2289;
  p_output1[87]=t2333;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t2193 - 0.8*(-1.*t1464*t1501 + t2297) + t2343;
  p_output1[90]=-0.4*t1484*t1501 + 0.4*t1492*t1647 - 0.8*t2234;
  p_output1[91]=t1784;
  p_output1[92]=t2074;
  p_output1[93]=t2189;
  p_output1[94]=-1.58228 - 3.2*t2364 - 3.2*t2366;
  p_output1[95]=t2370;
  p_output1[96]=t1804*t1807 + t1819*t2086;
  p_output1[97]=t1807*t1951 + t1819*t2138 + t1861*t2254;
  p_output1[98]=0.768*t1797*t1987 + t1800*(6.4*t1778*t1987 + 6.4*t1782*t1991) + t1807*t1993 + t1819*t2154 + t1861*t2268;
  p_output1[99]=t2049;
  p_output1[100]=t1804;
  p_output1[101]=t2293;
  p_output1[102]=1.58228 + 3.2*t2364 + 3.2*t2366;
  p_output1[103]=t2391;
  p_output1[104]=t1785;
  p_output1[105]=t2075;
  p_output1[106]=t2191;
  p_output1[107]=t2370;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t1700*t1807 + 0.768*t1819*t1849;
  p_output1[110]=0.768*t1861*t1973 + t2396 + t2397;
  p_output1[111]=0.768*t1800*t1987 + 0.768*t1861*t2006 + t2396 + t2397;
  p_output1[112]=t2050;
  p_output1[113]=t2166;
  p_output1[114]=t2295;
  p_output1[115]=t2391;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
