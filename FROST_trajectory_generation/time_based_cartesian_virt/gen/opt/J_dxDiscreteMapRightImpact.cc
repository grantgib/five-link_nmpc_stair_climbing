/*
 * Automatically Generated from Mathematica.
 * Mon 8 Feb 2021 04:16:51 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t598;
  double t161;
  double t1256;
  double t2299;
  double t5114;
  double t5305;
  double t5436;
  double t5455;
  double t5514;
  double t6625;
  double t6736;
  double t7277;
  double t7303;
  double t7378;
  double t7394;
  double t7461;
  double t3654;
  double t4424;
  double t4641;
  double t1290;
  double t2912;
  double t2917;
  double t5123;
  double t5337;
  double t5426;
  double t5435;
  double t5548;
  double t5775;
  double t5880;
  double t6015;
  double t6018;
  double t6428;
  double t6444;
  double t6456;
  double t7241;
  double t7253;
  double t7254;
  double t6683;
  double t6740;
  double t7114;
  double t7300;
  double t7317;
  double t7332;
  double t7340;
  double t7477;
  double t7479;
  double t7491;
  double t7517;
  double t7520;
  double t7534;
  double t7559;
  double t7560;
  double t7858;
  double t7861;
  double t7862;
  double t7868;
  double t7869;
  double t7871;
  double t7873;
  double t7879;
  double t7882;
  double t7883;
  double t7885;
  double t8157;
  double t8217;
  double t8220;
  double t8224;
  double t8241;
  double t8245;
  double t8246;
  double t8250;
  double t8255;
  double t8265;
  double t8273;
  double t7630;
  double t7633;
  double t7641;
  double t7607;
  double t7613;
  double t7618;
  double t8433;
  double t8441;
  double t8446;
  double t7644;
  double t7646;
  double t8400;
  double t8406;
  double t8411;
  double t8414;
  double t7715;
  double t7723;
  double t7734;
  double t7654;
  double t7677;
  double t7691;
  double t8373;
  double t8377;
  double t8380;
  double t7747;
  double t7753;
  double t8343;
  double t8347;
  double t8349;
  double t8353;
  double t4681;
  double t7256;
  double t7784;
  double t7818;
  double t7837;
  double t7843;
  double t7846;
  double t7880;
  double t7889;
  double t7911;
  double t7944;
  double t7991;
  double t7998;
  double t8075;
  double t8111;
  double t8121;
  double t8131;
  double t8149;
  double t8251;
  double t8276;
  double t8277;
  double t8286;
  double t8317;
  double t8318;
  double t8463;
  double t8469;
  double t8486;
  double t8487;
  double t8489;
  double t8834;
  double t8837;
  double t8838;
  double t8848;
  double t8849;
  double t8519;
  double t8520;
  double t8521;
  double t8522;
  double t8613;
  double t8615;
  double t8617;
  double t8618;
  double t8619;
  double t8623;
  double t8627;
  double t8629;
  double t8633;
  double t8635;
  double t8638;
  double t8772;
  double t8776;
  double t8784;
  double t8950;
  double t8995;
  double t9000;
  double t8850;
  double t8853;
  double t8854;
  double t8858;
  double t8859;
  double t8882;
  double t8886;
  double t8887;
  double t8888;
  double t8893;
  double t8899;
  double t8942;
  double t9032;
  double t9065;
  double t9116;
  double t9207;
  double t9208;
  double t9133;
  double t9212;
  double t9214;
  double t9151;
  double t8498;
  double t8499;
  double t8504;
  double t8506;
  double t8507;
  double t9230;
  double t9234;
  double t9236;
  double t9237;
  double t9238;
  double t8547;
  double t8557;
  double t8683;
  double t8686;
  double t8687;
  double t8707;
  double t8714;
  double t8717;
  double t8722;
  double t8723;
  double t8724;
  double t8804;
  double t9272;
  double t9273;
  double t9274;
  double t9240;
  double t9242;
  double t9243;
  double t9247;
  double t9250;
  double t9255;
  double t9256;
  double t9258;
  double t9263;
  double t9264;
  double t9265;
  double t9268;
  double t9276;
  double t9277;
  double t9292;
  double t9350;
  double t9355;
  double t9295;
  double t9360;
  double t9371;
  double t9297;
  double t396;
  double t664;
  double t2962;
  double t5822;
  double t6549;
  double t7184;
  double t7481;
  double t7569;
  double t7621;
  double t7626;
  double t7642;
  double t7648;
  double t7699;
  double t7702;
  double t7738;
  double t7758;
  double t7759;
  double t589;
  double t1217;
  double t4789;
  double t8661;
  double t8663;
  double t7257;
  double t8735;
  double t8745;
  double t8643;
  double t8654;
  double t8671;
  double t8674;
  double t8725;
  double t8728;
  double t8757;
  double t8764;
  double t8657;
  double t8662;
  double t8667;
  double t8679;
  double t8734;
  double t8738;
  double t8747;
  double t8766;
  double t8769;
  double t7777;
  double t9818;
  double t9865;
  double t8913;
  double t9942;
  double t9011;
  double t9067;
  double t9071;
  double t9132;
  double t9149;
  double t9153;
  double t9954;
  double t9171;
  double t9179;
  double t9181;
  double t9955;
  double t9165;
  double t9167;
  double t9168;
  double t9956;
  double t9992;
  double t9994;
  double t9204;
  double t10005;
  double t9209;
  double t9215;
  double t9216;
  double t10007;
  double t9219;
  double t9220;
  double t9223;
  double t9842;
  double t9869;
  double t9266;
  double t9945;
  double t9275;
  double t9284;
  double t9285;
  double t9293;
  double t9296;
  double t9300;
  double t10076;
  double t9320;
  double t9322;
  double t9326;
  double t10077;
  double t9311;
  double t9312;
  double t9313;
  double t10079;
  double t10103;
  double t10104;
  double t9343;
  double t10136;
  double t9356;
  double t9372;
  double t9375;
  double t10142;
  double t9377;
  double t9378;
  double t9386;
  double t9437;
  double t9439;
  double t9440;
  double t9445;
  double t9447;
  double t9450;
  double t9453;
  double t9462;
  double t9466;
  double t9411;
  double t9413;
  double t8783;
  double t8785;
  double t8802;
  double t8805;
  double t8817;
  double t8828;
  double t8492;
  double t8493;
  double t8495;
  double t8510;
  double t8512;
  double t8516;
  double t7857;
  double t7912;
  double t8066;
  double t8156;
  double t8281;
  double t8319;
  double t8332;
  double t9709;
  double t9711;
  double t9713;
  double t9715;
  double t9722;
  double t9727;
  double t9730;
  double t9731;
  double t9943;
  double t9944;
  double t9946;
  double t9949;
  double t9951;
  double t10384;
  double t10388;
  double t10400;
  double t10401;
  double t10402;
  double t10404;
  double t10412;
  double t10416;
  double t10423;
  double t10430;
  double t10434;
  double t10435;
  double t10436;
  double t10438;
  double t10439;
  double t10446;
  double t10006;
  double t10013;
  double t10024;
  double t9091;
  double t9157;
  double t9159;
  double t10061;
  double t10062;
  double t10066;
  double t9217;
  double t9225;
  double t9226;
  double t10140;
  double t10143;
  double t10144;
  double t9286;
  double t9301;
  double t9302;
  double t10187;
  double t10188;
  double t10190;
  double t9376;
  double t9404;
  double t9406;
  double t9471;
  double t9472;
  double t9496;
  double t9512;
  double t9514;
  double t9525;
  double t9551;
  double t9559;
  double t10218;
  double t10224;
  double t10236;
  double t10249;
  double t10280;
  double t10287;
  double t10573;
  double t8396;
  double t8429;
  double t8453;
  double t8455;
  double t9768;
  double t9769;
  double t9792;
  double t9793;
  double t10354;
  double t10356;
  double t10365;
  double t10370;
  double t9819;
  double t9821;
  double t9823;
  double t9957;
  double t8856;
  double t10466;
  double t10473;
  double t10483;
  double t10557;
  double t10576;
  double t10582;
  double t10586;
  double t10587;
  double t10589;
  double t10590;
  double t10602;
  double t10610;
  double t10611;
  double t10612;
  double t10614;
  double t10616;
  double t10038;
  double t10040;
  double t10042;
  double t9170;
  double t9182;
  double t9183;
  double t10617;
  double t10619;
  double t10621;
  double t10623;
  double t10640;
  double t9560;
  double t9573;
  double t9584;
  double t9651;
  double t10854;
  double t10860;
  double t10871;
  double t10875;
  double t11010;
  double t11014;
  double t10921;
  double t10923;
  double t10924;
  double t10932;
  double t10941;
  double t10942;
  double t10949;
  double t10961;
  double t10990;
  double t10997;
  double t8458;
  double t9800;
  double t10380;
  double t10383;
  double t11033;
  double t11049;
  double t11124;
  double t11126;
  double t9653;
  double t10203;
  double t10879;
  double t10882;
  double t11103;
  double t11105;
  double t11137;
  double t8337;
  double t8360;
  double t8381;
  double t8383;
  double t9733;
  double t9736;
  double t9745;
  double t9756;
  double t10297;
  double t10308;
  double t10320;
  double t10334;
  double t9843;
  double t9845;
  double t9861;
  double t10084;
  double t9244;
  double t10690;
  double t10696;
  double t10698;
  double t10154;
  double t10159;
  double t10162;
  double t9314;
  double t9332;
  double t9334;
  double t10749;
  double t10758;
  double t10768;
  double t10778;
  double t10788;
  double t9661;
  double t9664;
  double t9671;
  double t9676;
  double t10889;
  double t10896;
  double t10898;
  double t10914;
  double t11245;
  double t11267;
  double t8384;
  double t9761;
  double t10336;
  double t10339;
  double t11285;
  double t11290;
  double t11415;
  double t11421;
  double t9684;
  double t10214;
  double t10915;
  double t10920;
  double t11381;
  double t11382;
  t598 = Sin(var2[2]);
  t161 = Cos(var2[2]);
  t1256 = Cos(var2[3]);
  t2299 = Sin(var2[3]);
  t5114 = Cos(var2[4]);
  t5305 = Sin(var2[4]);
  t5436 = t1256*t5114;
  t5455 = -1.*t2299*t5305;
  t5514 = t5436 + t5455;
  t6625 = Cos(var2[5]);
  t6736 = Sin(var2[5]);
  t7277 = Cos(var2[6]);
  t7303 = Sin(var2[6]);
  t7378 = t6625*t7277;
  t7394 = -1.*t6736*t7303;
  t7461 = t7378 + t7394;
  t3654 = t161*t1256;
  t4424 = -1.*t598*t2299;
  t4641 = t3654 + t4424;
  t1290 = t1256*t598;
  t2912 = t161*t2299;
  t2917 = t1290 + t2912;
  t5123 = -1.*t5114*t2299;
  t5337 = -1.*t1256*t5305;
  t5426 = t5123 + t5337;
  t5435 = t598*t5426;
  t5548 = t161*t5514;
  t5775 = t5435 + t5548;
  t5880 = t5114*t2299;
  t6015 = t1256*t5305;
  t6018 = t5880 + t6015;
  t6428 = t161*t6018;
  t6444 = t598*t5514;
  t6456 = t6428 + t6444;
  t7241 = t161*t6625;
  t7253 = -1.*t598*t6736;
  t7254 = t7241 + t7253;
  t6683 = t6625*t598;
  t6740 = t161*t6736;
  t7114 = t6683 + t6740;
  t7300 = -1.*t7277*t6736;
  t7317 = -1.*t6625*t7303;
  t7332 = t7300 + t7317;
  t7340 = t598*t7332;
  t7477 = t161*t7461;
  t7479 = t7340 + t7477;
  t7491 = t7277*t6736;
  t7517 = t6625*t7303;
  t7520 = t7491 + t7517;
  t7534 = t161*t7520;
  t7559 = t598*t7461;
  t7560 = t7534 + t7559;
  t7858 = -1.*t5114;
  t7861 = 1. + t7858;
  t7862 = 0.4*t7861;
  t7868 = 0.64*t5114;
  t7869 = t7862 + t7868;
  t7871 = t7869*t2299;
  t7873 = 0.24*t1256*t5305;
  t7879 = t7871 + t7873;
  t7882 = t1256*t7869;
  t7883 = -0.24*t2299*t5305;
  t7885 = t7882 + t7883;
  t8157 = -1.*t7277;
  t8217 = 1. + t8157;
  t8220 = 0.4*t8217;
  t8224 = 0.64*t7277;
  t8241 = t8220 + t8224;
  t8245 = t8241*t6736;
  t8246 = 0.24*t6625*t7303;
  t8250 = t8245 + t8246;
  t8255 = t6625*t8241;
  t8265 = -0.24*t6736*t7303;
  t8273 = t8255 + t8265;
  t7630 = t161*t5426;
  t7633 = -1.*t598*t5514;
  t7641 = t7630 + t7633;
  t7607 = -1.*t1256*t598;
  t7613 = -1.*t161*t2299;
  t7618 = t7607 + t7613;
  t8433 = t7869*t5305;
  t8441 = -0.24*t5114*t5305;
  t8446 = t8433 + t8441;
  t7644 = -1.*t598*t6018;
  t7646 = t7644 + t5548;
  t8400 = t7869*t5114;
  t8406 = Power(t5305,2);
  t8411 = 0.24*t8406;
  t8414 = t8400 + t8411;
  t7715 = t161*t7332;
  t7723 = -1.*t598*t7461;
  t7734 = t7715 + t7723;
  t7654 = -1.*t6625*t598;
  t7677 = -1.*t161*t6736;
  t7691 = t7654 + t7677;
  t8373 = t8241*t7303;
  t8377 = -0.24*t7277*t7303;
  t8380 = t8373 + t8377;
  t7747 = -1.*t598*t7520;
  t7753 = t7747 + t7477;
  t8343 = t8241*t7277;
  t8347 = Power(t7303,2);
  t8349 = 0.24*t8347;
  t8353 = t8343 + t8349;
  t4681 = Power(t4641,2);
  t7256 = Power(t7254,2);
  t7784 = Power(t1256,2);
  t7818 = 0.11*t7784;
  t7837 = Power(t2299,2);
  t7843 = 0.11*t7837;
  t7846 = t7818 + t7843;
  t7880 = -1.*t7879*t5514;
  t7889 = -1.*t5426*t7885;
  t7911 = t7880 + t7889;
  t7944 = t7879*t6018;
  t7991 = t5514*t7885;
  t7998 = t7944 + t7991;
  t8075 = Power(t6625,2);
  t8111 = 0.11*t8075;
  t8121 = Power(t6736,2);
  t8131 = 0.11*t8121;
  t8149 = t8111 + t8131;
  t8251 = -1.*t8250*t7461;
  t8276 = -1.*t7332*t8273;
  t8277 = t8251 + t8276;
  t8286 = t8250*t7520;
  t8317 = t7461*t8273;
  t8318 = t8286 + t8317;
  t8463 = -1.*var1[6];
  t8469 = var3[4] + t8463;
  t8486 = -1.*var1[5];
  t8487 = var3[3] + t8486;
  t8489 = 0.748*t7618;
  t8834 = -1.*t1256*t5114;
  t8837 = t2299*t5305;
  t8838 = t8834 + t8837;
  t8848 = t598*t8838;
  t8849 = t7630 + t8848;
  t8519 = -1.*var1[0];
  t8520 = var3[0] + t8519;
  t8521 = 13.6*t7618*t4641;
  t8522 = 13.6*t2917*t4641;
  t8613 = -1.*var1[1];
  t8615 = var3[1] + t8613;
  t8617 = Power(t7618,2);
  t8618 = 6.8*t8617;
  t8619 = 6.8*t7618*t2917;
  t8623 = 6.8*t4681;
  t8627 = -1.*t161*t1256;
  t8629 = t598*t2299;
  t8633 = t8627 + t8629;
  t8635 = 6.8*t4641*t8633;
  t8638 = -1.*t598*t5426;
  t8772 = -1.*var1[2];
  t8776 = var3[2] + t8772;
  t8784 = 6.8*t7618*t7846;
  t8950 = -1.*t7869*t2299;
  t8995 = -0.24*t1256*t5305;
  t9000 = t8950 + t8995;
  t8850 = 0.768*t8469*t8849;
  t8853 = 3.2*t8446*t5775;
  t8854 = 3.2*t8414*t8849;
  t8858 = 6.4*t5775*t6456;
  t8859 = 6.4*t5775*t8849;
  t8882 = 3.2*t5775*t7646;
  t8886 = 3.2*t7641*t6456;
  t8887 = t161*t8838;
  t8888 = t8638 + t8887;
  t8893 = 3.2*t5775*t8888;
  t8899 = 3.2*t7641*t8849;
  t8942 = 3.2*t5775*t7911;
  t9032 = t7879*t5514;
  t9065 = t5426*t7885;
  t9116 = 3.2*t7998*t8849;
  t9207 = -0.24*t5114*t2299;
  t9208 = t9207 + t8995;
  t9133 = -1.*t5426*t7879;
  t9212 = 0.24*t1256*t5114;
  t9214 = t9212 + t7883;
  t9151 = -1.*t7885*t8838;
  t8498 = -1.*var1[4];
  t8499 = var3[6] + t8498;
  t8504 = -1.*var1[3];
  t8506 = var3[5] + t8504;
  t8507 = 0.748*t7691;
  t9230 = -1.*t6625*t7277;
  t9234 = t6736*t7303;
  t9236 = t9230 + t9234;
  t9237 = t598*t9236;
  t9238 = t7715 + t9237;
  t8547 = 13.6*t7691*t7254;
  t8557 = 13.6*t7114*t7254;
  t8683 = Power(t7691,2);
  t8686 = 6.8*t8683;
  t8687 = 6.8*t7691*t7114;
  t8707 = 6.8*t7256;
  t8714 = -1.*t161*t6625;
  t8717 = t598*t6736;
  t8722 = t8714 + t8717;
  t8723 = 6.8*t7254*t8722;
  t8724 = -1.*t598*t7332;
  t8804 = 6.8*t7691*t8149;
  t9272 = -1.*t8241*t6736;
  t9273 = -0.24*t6625*t7303;
  t9274 = t9272 + t9273;
  t9240 = 0.768*t8499*t9238;
  t9242 = 3.2*t8380*t7479;
  t9243 = 3.2*t8353*t9238;
  t9247 = 6.4*t7479*t7560;
  t9250 = 6.4*t7479*t9238;
  t9255 = 3.2*t7479*t7753;
  t9256 = 3.2*t7734*t7560;
  t9258 = t161*t9236;
  t9263 = t8724 + t9258;
  t9264 = 3.2*t7479*t9263;
  t9265 = 3.2*t7734*t9238;
  t9268 = 3.2*t7479*t8277;
  t9276 = t8250*t7461;
  t9277 = t7332*t8273;
  t9292 = 3.2*t8318*t9238;
  t9350 = -0.24*t7277*t6736;
  t9355 = t9350 + t9273;
  t9295 = -1.*t7332*t8250;
  t9360 = 0.24*t6625*t7277;
  t9371 = t9360 + t8265;
  t9297 = -1.*t8273*t9236;
  t396 = Power(t161,2);
  t664 = Power(t598,2);
  t2962 = Power(t2917,2);
  t5822 = Power(t5775,2);
  t6549 = Power(t6456,2);
  t7184 = Power(t7114,2);
  t7481 = Power(t7479,2);
  t7569 = Power(t7560,2);
  t7621 = -6.8*t7618*t4641;
  t7626 = -6.8*t2917*t4641;
  t7642 = -3.2*t5775*t7641;
  t7648 = -3.2*t7646*t6456;
  t7699 = -6.8*t7691*t7254;
  t7702 = -6.8*t7114*t7254;
  t7738 = -3.2*t7479*t7734;
  t7758 = -3.2*t7753*t7560;
  t7759 = t7621 + t7626 + t7642 + t7648 + t7699 + t7702 + t7738 + t7758;
  t589 = -12.*t396;
  t1217 = -12.*t664;
  t4789 = -6.8*t4681;
  t8661 = Power(t7646,2);
  t8663 = Power(t7641,2);
  t7257 = -6.8*t7256;
  t8735 = Power(t7753,2);
  t8745 = Power(t7734,2);
  t8643 = -1.*t161*t5514;
  t8654 = t8638 + t8643;
  t8671 = -1.*t161*t6018;
  t8674 = t8671 + t7633;
  t8725 = -1.*t161*t7461;
  t8728 = t8724 + t8725;
  t8757 = -1.*t161*t7520;
  t8764 = t8757 + t7723;
  t8657 = 3.2*t8654*t5775;
  t8662 = 3.2*t8661;
  t8667 = 3.2*t8663;
  t8679 = 3.2*t8674*t6456;
  t8734 = 3.2*t8728*t7479;
  t8738 = 3.2*t8735;
  t8747 = 3.2*t8745;
  t8766 = 3.2*t8764*t7560;
  t8769 = t8618 + t8619 + t8623 + t8635 + t8657 + t8662 + t8667 + t8679 + t8686 + t8687 + t8707 + t8723 + t8734 + t8738 + t8747 + t8766;
  t7777 = -2.88*t161;
  t9818 = 0.748*t8633;
  t9865 = 13.6*t7618*t8633;
  t8913 = t8618 + t8619 + t8623 + t8635 + t8882 + t8886 + t8893 + t8899;
  t9942 = 6.8*t8633*t7846;
  t9011 = t9000*t5514;
  t9067 = t6018*t7885;
  t9071 = t9011 + t9032 + t9065 + t9067;
  t9132 = -1.*t5426*t9000;
  t9149 = -1.*t5514*t7885;
  t9153 = t9132 + t9133 + t9149 + t9151;
  t9954 = 0.768*t8469*t8888;
  t9171 = Power(t5114,2);
  t9179 = -0.24*t9171;
  t9181 = t8400 + t9179;
  t9955 = 3.2*t8446*t7641;
  t9165 = -1.*t7869*t5305;
  t9167 = 0.24*t5114*t5305;
  t9168 = t9165 + t9167;
  t9956 = 3.2*t8414*t8888;
  t9992 = 6.4*t7646*t7641;
  t9994 = 6.4*t7641*t8888;
  t9204 = t8882 + t8886 + t8893 + t8899;
  t10005 = 3.2*t7641*t7911;
  t9209 = t9208*t5514;
  t9215 = t6018*t9214;
  t9216 = t9209 + t9032 + t9065 + t9215;
  t10007 = 3.2*t7998*t8888;
  t9219 = -1.*t5426*t9208;
  t9220 = -1.*t5514*t9214;
  t9223 = t9219 + t9133 + t9220 + t9151;
  t9842 = 0.748*t8722;
  t9869 = 13.6*t7691*t8722;
  t9266 = t8686 + t8687 + t8707 + t8723 + t9255 + t9256 + t9264 + t9265;
  t9945 = 6.8*t8722*t8149;
  t9275 = t9274*t7461;
  t9284 = t7520*t8273;
  t9285 = t9275 + t9276 + t9277 + t9284;
  t9293 = -1.*t7332*t9274;
  t9296 = -1.*t7461*t8273;
  t9300 = t9293 + t9295 + t9296 + t9297;
  t10076 = 0.768*t8499*t9263;
  t9320 = Power(t7277,2);
  t9322 = -0.24*t9320;
  t9326 = t8343 + t9322;
  t10077 = 3.2*t8380*t7734;
  t9311 = -1.*t8241*t7303;
  t9312 = 0.24*t7277*t7303;
  t9313 = t9311 + t9312;
  t10079 = 3.2*t8353*t9263;
  t10103 = 6.4*t7753*t7734;
  t10104 = 6.4*t7734*t9263;
  t9343 = t9255 + t9256 + t9264 + t9265;
  t10136 = 3.2*t7734*t8277;
  t9356 = t9355*t7461;
  t9372 = t7520*t9371;
  t9375 = t9356 + t9276 + t9277 + t9372;
  t10142 = 3.2*t8318*t9263;
  t9377 = -1.*t7332*t9355;
  t9378 = -1.*t7461*t9371;
  t9386 = t9377 + t9295 + t9378 + t9297;
  t9437 = 6.8*t7618*t4641;
  t9439 = 6.8*t2917*t4641;
  t9440 = 3.2*t5775*t7641;
  t9445 = 3.2*t7646*t6456;
  t9447 = 6.8*t7691*t7254;
  t9450 = 6.8*t7114*t7254;
  t9453 = 3.2*t7479*t7734;
  t9462 = 3.2*t7753*t7560;
  t9466 = t9437 + t9439 + t9440 + t9445 + t9447 + t9450 + t9453 + t9462;
  t9411 = 12.*t396;
  t9413 = 12.*t664;
  t8783 = -2.88*t598;
  t8785 = 3.2*t7646*t7911;
  t8802 = 3.2*t7641*t7998;
  t8805 = 3.2*t7753*t8277;
  t8817 = 3.2*t7734*t8318;
  t8828 = t8783 + t8784 + t8785 + t8802 + t8804 + t8805 + t8817;
  t8492 = 3.2*t8446*t7646;
  t8493 = 3.2*t8414*t7641;
  t8495 = t8489 + t8492 + t8493;
  t8510 = 3.2*t8380*t7753;
  t8512 = 3.2*t8353*t7734;
  t8516 = t8507 + t8510 + t8512;
  t7857 = -6.8*t4641*t7846;
  t7912 = -3.2*t6456*t7911;
  t8066 = -3.2*t5775*t7998;
  t8156 = -6.8*t7254*t8149;
  t8281 = -3.2*t7560*t8277;
  t8319 = -3.2*t7479*t8318;
  t8332 = t7777 + t7857 + t7912 + t8066 + t8156 + t8281 + t8319;
  t9709 = 2.88*t598;
  t9711 = -6.8*t7618*t7846;
  t9713 = -3.2*t7646*t7911;
  t9715 = -3.2*t7641*t7998;
  t9722 = -6.8*t7691*t8149;
  t9727 = -3.2*t7753*t8277;
  t9730 = -3.2*t7734*t8318;
  t9731 = t9709 + t9711 + t9713 + t9715 + t9722 + t9727 + t9730;
  t9943 = 3.2*t8674*t7911;
  t9944 = 3.2*t8654*t7998;
  t9946 = 3.2*t8764*t8277;
  t9949 = 3.2*t8728*t8318;
  t9951 = t7777 + t9942 + t9943 + t9944 + t9945 + t9946 + t9949;
  t10384 = 0.4*t7861*t8633;
  t10388 = -0.4*t2917*t5305;
  t10400 = t5114*t8633;
  t10401 = t2917*t5305;
  t10402 = t10400 + t10401;
  t10404 = 0.8*t10402;
  t10412 = t10384 + t10388 + t10404;
  t10416 = -1.*var4[2]*t10412;
  t10423 = 0.4*t7861*t7618;
  t10430 = -0.4*t8633*t5305;
  t10434 = t5114*t7618;
  t10435 = t8633*t5305;
  t10436 = t10434 + t10435;
  t10438 = 0.8*t10436;
  t10439 = t10423 + t10430 + t10438;
  t10446 = -1.*var4[0]*t10439;
  t10006 = 3.2*t7641*t9071;
  t10013 = 3.2*t7646*t9153;
  t10024 = t9942 + t10005 + t10006 + t10007 + t10013;
  t9091 = 3.2*t5775*t9071;
  t9157 = 3.2*t6456*t9153;
  t9159 = t8784 + t8942 + t9091 + t9116 + t9157;
  t10061 = 3.2*t7641*t9216;
  t10062 = 3.2*t7646*t9223;
  t10066 = t10005 + t10061 + t10007 + t10062;
  t9217 = 3.2*t5775*t9216;
  t9225 = 3.2*t6456*t9223;
  t9226 = t8942 + t9217 + t9116 + t9225;
  t10140 = 3.2*t7734*t9285;
  t10143 = 3.2*t7753*t9300;
  t10144 = t9945 + t10136 + t10140 + t10142 + t10143;
  t9286 = 3.2*t7479*t9285;
  t9301 = 3.2*t7560*t9300;
  t9302 = t8804 + t9268 + t9286 + t9292 + t9301;
  t10187 = 3.2*t7734*t9375;
  t10188 = 3.2*t7753*t9386;
  t10190 = t10136 + t10187 + t10142 + t10188;
  t9376 = 3.2*t7479*t9375;
  t9404 = 3.2*t7560*t9386;
  t9406 = t9268 + t9376 + t9292 + t9404;
  t9471 = 2.88*t161;
  t9472 = 6.8*t4641*t7846;
  t9496 = 3.2*t6456*t7911;
  t9512 = 3.2*t5775*t7998;
  t9514 = 6.8*t7254*t8149;
  t9525 = 3.2*t7560*t8277;
  t9551 = 3.2*t7479*t8318;
  t9559 = t9471 + t9472 + t9496 + t9512 + t9514 + t9525 + t9551;
  t10218 = Power(t7846,2);
  t10224 = Power(t7911,2);
  t10236 = Power(t7998,2);
  t10249 = Power(t8149,2);
  t10280 = Power(t8277,2);
  t10287 = Power(t8318,2);
  t10573 = 0.4*t7618*t5305;
  t8396 = -0.748*t4641;
  t8429 = -3.2*t8414*t5775;
  t8453 = -3.2*t8446*t6456;
  t8455 = t8396 + t8429 + t8453;
  t9768 = -0.748*t7618;
  t9769 = -3.2*t8446*t7646;
  t9792 = -3.2*t8414*t7641;
  t9793 = t9768 + t9769 + t9792;
  t10354 = -0.748*t7846;
  t10356 = -3.2*t8446*t7911;
  t10365 = -3.2*t8414*t7998;
  t10370 = -0.67 + t10354 + t10356 + t10365;
  t9819 = 3.2*t8414*t8654;
  t9821 = 3.2*t8446*t8674;
  t9823 = t9818 + t9819 + t9821;
  t9957 = t9818 + t9955 + t9956;
  t8856 = t8489 + t8853 + t8854;
  t10466 = 3.2*t8414*t9071;
  t10473 = 3.2*t8446*t9153;
  t10483 = t10466 + t10473;
  t10557 = -0.4*t5114*t8633;
  t10576 = -1.*t7618*t5305;
  t10582 = t10400 + t10576;
  t10586 = 0.8*t10582;
  t10587 = t10557 + t10573 + t10586;
  t10589 = -1.*var4[2]*t10587;
  t10590 = -0.4*t5114*t7618;
  t10602 = 0.4*t4641*t5305;
  t10610 = -1.*t4641*t5305;
  t10611 = t10434 + t10610;
  t10612 = 0.8*t10611;
  t10614 = t10590 + t10602 + t10612;
  t10616 = -1.*var4[0]*t10614;
  t10038 = 3.2*t9181*t7646;
  t10040 = 3.2*t9168*t7641;
  t10042 = t10038 + t9955 + t10040 + t9956;
  t9170 = 3.2*t9168*t5775;
  t9182 = 3.2*t9181*t6456;
  t9183 = t8853 + t9170 + t9182 + t8854;
  t10617 = 3.2*t9181*t7911;
  t10619 = 3.2*t9168*t7998;
  t10621 = 3.2*t8414*t9216;
  t10623 = 3.2*t8446*t9223;
  t10640 = t10617 + t10619 + t10621 + t10623;
  t9560 = 0.748*t4641;
  t9573 = 3.2*t8414*t5775;
  t9584 = 3.2*t8446*t6456;
  t9651 = t9560 + t9573 + t9584;
  t10854 = 0.748*t7846;
  t10860 = 3.2*t8446*t7911;
  t10871 = 3.2*t8414*t7998;
  t10875 = 0.67 + t10854 + t10860 + t10871;
  t11010 = Power(t8446,2);
  t11014 = Power(t8414,2);
  t10921 = -0.4*t7861*t4641;
  t10923 = t5114*t4641;
  t10924 = t7618*t5305;
  t10932 = t10923 + t10924;
  t10941 = -0.8*t10932;
  t10942 = t10921 + t10573 + t10941;
  t10949 = -0.4*t7861*t7618;
  t10961 = 0.4*t8633*t5305;
  t10990 = -0.8*t10436;
  t10997 = t10949 + t10961 + t10990;
  t8458 = -0.768*t5775;
  t9800 = -0.768*t7641;
  t10380 = -0.768*t7998;
  t10383 = -0.2 + t10380;
  t11033 = -0.768*t8414;
  t11049 = -0.2 + t11033;
  t11124 = 0.768*t8615*t8888;
  t11126 = 0.768*t8520*t8849;
  t9653 = 0.768*t5775;
  t10203 = 0.768*t7641;
  t10879 = 0.768*t7998;
  t10882 = 0.2 + t10879;
  t11103 = 0.768*t8414;
  t11105 = 0.2 + t11103;
  t11137 = 0.4*t5114*t4641;
  t8337 = -0.748*t7254;
  t8360 = -3.2*t8353*t7479;
  t8381 = -3.2*t8380*t7560;
  t8383 = t8337 + t8360 + t8381;
  t9733 = -0.748*t7691;
  t9736 = -3.2*t8380*t7753;
  t9745 = -3.2*t8353*t7734;
  t9756 = t9733 + t9736 + t9745;
  t10297 = -0.748*t8149;
  t10308 = -3.2*t8380*t8277;
  t10320 = -3.2*t8353*t8318;
  t10334 = -0.67 + t10297 + t10308 + t10320;
  t9843 = 3.2*t8353*t8728;
  t9845 = 3.2*t8380*t8764;
  t9861 = t9842 + t9843 + t9845;
  t10084 = t9842 + t10077 + t10079;
  t9244 = t8507 + t9242 + t9243;
  t10690 = 3.2*t8353*t9285;
  t10696 = 3.2*t8380*t9300;
  t10698 = t10690 + t10696;
  t10154 = 3.2*t9326*t7753;
  t10159 = 3.2*t9313*t7734;
  t10162 = t10154 + t10077 + t10159 + t10079;
  t9314 = 3.2*t9313*t7479;
  t9332 = 3.2*t9326*t7560;
  t9334 = t9242 + t9314 + t9332 + t9243;
  t10749 = 3.2*t9326*t8277;
  t10758 = 3.2*t9313*t8318;
  t10768 = 3.2*t8353*t9375;
  t10778 = 3.2*t8380*t9386;
  t10788 = t10749 + t10758 + t10768 + t10778;
  t9661 = 0.748*t7254;
  t9664 = 3.2*t8353*t7479;
  t9671 = 3.2*t8380*t7560;
  t9676 = t9661 + t9664 + t9671;
  t10889 = 0.748*t8149;
  t10896 = 3.2*t8380*t8277;
  t10898 = 3.2*t8353*t8318;
  t10914 = 0.67 + t10889 + t10896 + t10898;
  t11245 = Power(t8380,2);
  t11267 = Power(t8353,2);
  t8384 = -0.768*t7479;
  t9761 = -0.768*t7734;
  t10336 = -0.768*t8318;
  t10339 = -0.2 + t10336;
  t11285 = -0.768*t8353;
  t11290 = -0.2 + t11285;
  t11415 = 0.768*t8615*t9263;
  t11421 = 0.768*t8520*t9238;
  t9684 = 0.768*t7479;
  t10214 = 0.768*t7734;
  t10915 = 0.768*t8318;
  t10920 = 0.2 + t10915;
  t11381 = 0.768*t8353;
  t11382 = 0.2 + t11381;
  p_output1[0]=t1217 - 6.8*t2962 + t4789 - 3.2*t5822 + t589 - 3.2*t6549 - 6.8*t7184 + t7257 - 3.2*t7481 - 3.2*t7569;
  p_output1[1]=t7759;
  p_output1[2]=t8332;
  p_output1[3]=t8383;
  p_output1[4]=t8384;
  p_output1[5]=t8455;
  p_output1[6]=t8458;
  p_output1[7]=0.768*t7641*t8469 + t8487*t8495 + 0.768*t7734*t8499 + t8506*t8516 + t8520*(6.4*t5775*t7641 + 6.4*t6456*t7646 + 6.4*t7479*t7734 + 6.4*t7560*t7753 + t8521 + t8522 + t8547 + t8557) + t8615*t8769 + t8776*t8828;
  p_output1[8]=t8850 + t8487*t8856 + t8520*(t8521 + t8522 + t8858 + t8859) + t8615*t8913 + t8776*t9159;
  p_output1[9]=t8850 + t8520*(t8858 + t8859) + t8487*t9183 + t8615*t9204 + t8776*t9226;
  p_output1[10]=t9240 + t8506*t9244 + t8520*(t8547 + t8557 + t9247 + t9250) + t8615*t9266 + t8776*t9302;
  p_output1[11]=t9240 + t8520*(t9247 + t9250) + t8506*t9334 + t8615*t9343 + t8776*t9406;
  p_output1[12]=6.8*t2962 + 3.2*t5822 + 3.2*t6549 + 6.8*t7184 + 3.2*t7481 + 3.2*t7569 + t8623 + t8707 + t9411 + t9413;
  p_output1[13]=t9466;
  p_output1[14]=t9559;
  p_output1[15]=t9651;
  p_output1[16]=t9653;
  p_output1[17]=t9676;
  p_output1[18]=t9684;
  p_output1[19]=-1.;
  p_output1[20]=t7759;
  p_output1[21]=t1217 + t4789 + t589 + t7257 - 6.8*t8617 - 3.2*t8661 - 3.2*t8663 - 6.8*t8683 - 3.2*t8735 - 3.2*t8745;
  p_output1[22]=t9731;
  p_output1[23]=t9756;
  p_output1[24]=t9761;
  p_output1[25]=t9793;
  p_output1[26]=t9800;
  p_output1[27]=0.768*t8469*t8654 + 0.768*t8499*t8728 + t8520*t8769 + t8487*t9823 + t8506*t9861 + t8615*(t8521 + t8547 + 6.4*t7641*t8654 + 6.4*t7646*t8674 + 6.4*t7734*t8728 + 6.4*t7753*t8764 + t9865 + t9869) + t8776*t9951;
  p_output1[28]=t10024*t8776 + t8520*t8913 + t9954 + t8487*t9957 + t8615*(t8521 + t9865 + t9992 + t9994);
  p_output1[29]=t10042*t8487 + t10066*t8776 + t8520*t9204 + t9954 + t8615*(t9992 + t9994);
  p_output1[30]=t10076 + t10084*t8506 + t10144*t8776 + t8520*t9266 + t8615*(t10103 + t10104 + t8547 + t9869);
  p_output1[31]=t10076 + t10162*t8506 + (t10103 + t10104)*t8615 + t10190*t8776 + t8520*t9343;
  p_output1[32]=t9466;
  p_output1[33]=t8618 + t8623 + t8662 + t8667 + t8686 + t8707 + t8738 + t8747 + t9411 + t9413;
  p_output1[34]=t8828;
  p_output1[35]=t8495;
  p_output1[36]=t10203;
  p_output1[37]=t8516;
  p_output1[38]=t10214;
  p_output1[39]=-1.;
  p_output1[40]=t8332;
  p_output1[41]=t9731;
  p_output1[42]=-3.3612 - 6.8*t10218 - 3.2*t10224 - 3.2*t10236 - 6.8*t10249 - 3.2*t10280 - 3.2*t10287;
  p_output1[43]=t10334;
  p_output1[44]=t10339;
  p_output1[45]=t10370;
  p_output1[46]=t10383;
  p_output1[47]=t10416 + t10446 + t8520*t8828 + t8615*t9951;
  p_output1[48]=t10416 + t10446 + t10483*t8487 + t10024*t8615 + 0.768*t8469*t9071 + t8776*(6.4*t7998*t9071 + 6.4*t7911*t9153) + t8520*t9159;
  p_output1[49]=t10589 + t10616 + t10640*t8487 + t10066*t8615 + 0.768*t8469*t9216 + t8776*(6.4*t7998*t9216 + 6.4*t7911*t9223) + t8520*t9226;
  p_output1[50]=t10698*t8506 + t10144*t8615 + 0.768*t8499*t9285 + t8776*(6.4*t8318*t9285 + 6.4*t8277*t9300) + t8520*t9302;
  p_output1[51]=t10788*t8506 + t10190*t8615 + 0.768*t8499*t9375 + t8776*(6.4*t8318*t9375 + 6.4*t8277*t9386) + t8520*t9406;
  p_output1[52]=t9559;
  p_output1[53]=t8828;
  p_output1[54]=3.3612 + 6.8*t10218 + 3.2*t10224 + 3.2*t10236 + 6.8*t10249 + 3.2*t10280 + 3.2*t10287;
  p_output1[55]=t10875;
  p_output1[56]=t10882;
  p_output1[57]=t10914;
  p_output1[58]=t10920;
  p_output1[59]=t10942;
  p_output1[60]=t10997;
  p_output1[61]=t8455;
  p_output1[62]=t9793;
  p_output1[63]=t10370;
  p_output1[64]=-1.58228 - 3.2*t11010 - 3.2*t11014;
  p_output1[65]=t11049;
  p_output1[66]=t10416 + t10446 + t8495*t8520 + t8615*t9823;
  p_output1[67]=t10416 + t10446 + t10483*t8776 + t8520*t8856 + t8615*t9957;
  p_output1[68]=t10589 + t10616 + t10042*t8615 + t10640*t8776 + 0.768*t8469*t9168 + t8487*(6.4*t8414*t9168 + 6.4*t8446*t9181) + t8520*t9183;
  p_output1[69]=t9651;
  p_output1[70]=t8495;
  p_output1[71]=t10875;
  p_output1[72]=1.58228 + 3.2*t11010 + 3.2*t11014;
  p_output1[73]=t11105;
  p_output1[74]=t10942;
  p_output1[75]=t10997;
  p_output1[76]=t8458;
  p_output1[77]=t9800;
  p_output1[78]=t10383;
  p_output1[79]=t11049;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=t10589 + t10616 + 0.768*t7641*t8520 + 0.768*t8615*t8654;
  p_output1[82]=t10589 + t10616 + t11124 + t11126 + 0.768*t8776*t9071;
  p_output1[83]=t11124 + t11126 + 0.768*t8487*t9168 + 0.768*t8776*t9216 - 1.*(t10602 + 0.4*t2917*t5114 + 0.8*(t10610 - 1.*t2917*t5114))*var4[0] - 1.*(t10573 + t11137 + 0.8*(t10576 - 1.*t4641*t5114))*var4[2];
  p_output1[84]=t9653;
  p_output1[85]=t10203;
  p_output1[86]=t10882;
  p_output1[87]=t11105;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t10388 + t11137 - 0.8*(t10923 - 1.*t2917*t5305);
  p_output1[90]=-0.8*t10611 - 0.4*t4641*t5305 + 0.4*t5114*t7618;
  p_output1[91]=t8383;
  p_output1[92]=t9756;
  p_output1[93]=t10334;
  p_output1[94]=-1.58228 - 3.2*t11245 - 3.2*t11267;
  p_output1[95]=t11290;
  p_output1[96]=t8516*t8520 + t8615*t9861;
  p_output1[97]=t10084*t8615 + t10698*t8776 + t8520*t9244;
  p_output1[98]=t10162*t8615 + t10788*t8776 + 0.768*t8499*t9313 + t8506*(6.4*t8353*t9313 + 6.4*t8380*t9326) + t8520*t9334;
  p_output1[99]=t9676;
  p_output1[100]=t8516;
  p_output1[101]=t10914;
  p_output1[102]=1.58228 + 3.2*t11245 + 3.2*t11267;
  p_output1[103]=t11382;
  p_output1[104]=t8384;
  p_output1[105]=t9761;
  p_output1[106]=t10339;
  p_output1[107]=t11290;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t7734*t8520 + 0.768*t8615*t8728;
  p_output1[110]=t11415 + t11421 + 0.768*t8776*t9285;
  p_output1[111]=t11415 + t11421 + 0.768*t8506*t9313 + 0.768*t8776*t9375;
  p_output1[112]=t9684;
  p_output1[113]=t10214;
  p_output1[114]=t10920;
  p_output1[115]=t11382;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
