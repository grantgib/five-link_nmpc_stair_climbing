%% Trajectory Tracking for Rabbit (planar 5-link walker)
%   Floating Base Input Output Linearization
%   Continuous Dynamics
%   Impact Map included in prediction horizon
clear; clc; close all;

%% Controller Information
% General
ctrl_info = struct(...
    'DT',                0.0005,...
    'step_look_ahead',   2,...
    'int',               "Euler",...%Euler,RK4
    'type',              "IO",...
    'N',                 1); % IO

%% Generate Dynamics Functions
disp("Calculating Kinematics and Dynamics Functions...");
tic
[dyn_info] = Generate_Dynamics_Kinematics();
disp("Kinematics and Dynamic Functions Created!  (" + toc + " sec)");

%% Load Desired Reference Trajectory
tic
ref_info = struct(...
    'num_steps',            3,...
    'external_force',       0,...
    'step_height',          "0.07",...
    'step_length',          "0.30",...
    'step_vel',             "0.50",...
    'time_based_cartesian', 1);

ref_info.step_dir = "Ascend";
% ref_info.step_dir = "Descend";

% Load reference
ref_info = Load_Reference_Trajectory(ctrl_info,dyn_info,ref_info);
disp("Reference Trajectory Loaded! ( " + toc + " sec)");

%% Initial Condition
ref_info.x_init = [ref_info.full_ref.gait(1).states.x(:,1);
                   ref_info.full_ref.gait(1).states.dx(:,1)];
disp("Initial Condition Set!");

%% Constraint Information
constr_info = struct;

% constrain the Ground Reaction Forces
constr_info.grf = struct(...
    'active',   0,...
    'mu',       0.9,...
    'fail',     0);

% Saturate the torque
constr_info.torque = struct('sat',0);

% Constrain swing foot height as a function of phase
constr_info.obstacle = struct(...
    'isObstacle',   0,...
    'height',       0.12,...
    'width',        [0.73, 0.85]); % As a function of phase

disp("Constraint Information Set!");

%% Build Nonlinear Program
% disp("Begin NLP formulation...");
% tic
% [ctrl_info] = Formulate_NLP(dyn_info,ctrl_info,ref_info,constr_info);
% disp("Finished formulating NLP! (N = " + ctrl_info.mpc_info.N + ", " + toc + " sec)");

%% ************************** Run Simulation ******************************
disp("Begin simulation...");
[traj_info,ctrl_info] = Simulate_IO(dyn_info,ctrl_info,ref_info,constr_info);
disp("Finished simulation!");

%% Save Simulation
if false
    Save_Info(ctrl_info,ref_info,constr_info,dyn_info,traj_info);
end

%% Plot
close all;
set(0,'DefaultFigureWindowStyle','docked')
% set(0,'DefaultFigureWindowStyle','normal')

plotSettings = struct(...
    'x',              1,...
    'u',              1,...
    'w',              1,...
    'virtual_constr', 1,...
    'xerr',           0,...
    'y_sw',           0,...
    'y_sw_normal',    0,...
    's',              0,...
    'calc_time',      0,...
    'impact',         0,...
    'h_q_vs_s',       0,...
    'last_step',      0,...
    'single_sol',     0,...
    'pos_stancefoot', 0,...
    'x_all',          0);
plotSettings.traj_title = ref_info.step_height + "m " + ref_info.step_dir;
Plot_Results(dyn_info,ctrl_info,ref_info,traj_info,constr_info,plotSettings);
disp('Finished Plotting!');

%% Animation
set(0,'DefaultFigureWindowStyle','normal')
animateSettings = struct(...
    'traj',         1,...
    'ref',          0,...
    'speed',        1,...
    'single_sol',   0);
% Animation_Grant(dyn_info,ctrl_info,ref_info,traj_info,animateSettings);
Animate_MPC_Traj(ctrl_info,ref_info,traj_info,animateSettings);
disp('Finished Animation!');